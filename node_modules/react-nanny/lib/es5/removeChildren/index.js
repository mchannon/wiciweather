"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeChildrenDeep = exports.removeChildren = void 0;
var React = require("react");
/**
 * Removes all children by specified predicate
 *
 * @since v1.0.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: T) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {T[]} - All non-matching children
 * @example
 * // Removes all children that have an 'active' prop set to false
 * removeChildren(children, child => !child.props.active);
 */
var removeChildren = function (children, predicate) {
    return React.Children.toArray(children).filter(function (child) { return !predicate(child); });
};
exports.removeChildren = removeChildren;
/**
 * Removes all children by specified predicate (deep search)
 *
 * @since v1.0.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: TC) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {T[]} - All non-matching children
 * @example
 * // Removes all children that have an 'active' prop set to false
 * removeChildrenDeep(children, child => !child.props.active);
 */
var removeChildrenDeep = function (children, predicate) {
    var _a;
    var _children = React.Children.toArray(children);
    var output = [];
    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
        var child = _children_1[_i];
        if (!predicate(child)) {
            if ((_a = child.props) === null || _a === void 0 ? void 0 : _a.children) {
                output = __spreadArray(__spreadArray([], output), [
                    Object.assign(child, {
                        props: Object.assign(child.props, {
                            children: Array.isArray(child.props.children)
                                ? exports.removeChildrenDeep(child.props.children, predicate)
                                : exports.removeChildrenDeep(child.props.children, predicate)[0],
                        }),
                    }),
                ]);
            }
            else {
                output = __spreadArray(__spreadArray([], output), [child]);
            }
        }
    }
    return output;
};
exports.removeChildrenDeep = removeChildrenDeep;
