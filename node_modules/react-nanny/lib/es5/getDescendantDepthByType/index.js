"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDescendantDepthByType = void 0;
var React = require("react");
var typeOfComponent_1 = require("../typeOfComponent");
var utils_1 = require("../_private/utils");
/**
 * Gets the depth to the first descendant (or self) of each root child that match the specified types
 *
 * @since v2.6.0
 * @template T
 * @template TC
 * @param {T} children - JSX children
 * @param {TC | TC[]} types - Types of children to match
 * @param {GetDescendantDepthByTypeConfig} [config={ customTypeKey: '__TYPE' }] - The configuration params
 * @returns {IDescendantDepth<T>[]} - The oldest ancestor with the depth to the matching descendant
 * @example
 * // Gets depth for all descendants that are of type ToDo (custom component), div, or React Fragment
 * getDescendantDepthByType(children, ['ToDo', 'div', 'react.fragment']);
 *
 * // Gets depth for all descendants that are of type MyComponent (custom component - full component passed in), a div, and React Fragment
 * import MyComponent from './MyComponent';
 * getDescendantDepthByType(children, [MyComponent, 'div', 'react.fragment']);
 *
 * // Gets depth for all descendants that are of type ToDo (custom component) with a customized {customTypeKey}
 * getDescendantDepthByType(children, ['ToDo'], { customTypeKey: 'myTypeKey' });
 * @docgen_types
 * // The configuration type for the util:
 * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type
 *
 * export type GetDescendantDepthByTypeConfig = { customTypeKey?: string };
 *
 * // The item type in the returned array:
 * //   ancestor: T - The oldest ancestor of a matching descendant
 * //   depthToMatch: number - The depth to the first predicate match; 0 indicates that the oldest ancestor matches
 *
 * export interface IDescendantDepth<T=React.ReactNode>{ ancestor: T, depthToMatch: number }
 * @docgen_description_note
 * If the child does not match any of the specified types or have a descendant that matches, the child is not returned with the result.
 * @docgen_import { getDescendantDepthByType, GetDescendantDepthByTypeConfig }
 * @docgen_imp_note <em>GetDescendantDepthByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects
 */
var getDescendantDepthByType = function (children, types, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.customTypeKey, customTypeKey = _c === void 0 ? '__TYPE' : _c;
    var _children = React.Children.toArray(children);
    var _types = utils_1.processTypes(Array.isArray(types) ? types : [types]);
    // recursively get the depth of the first matching child
    var getDepth = function (children, level) {
        var _a;
        var _children = React.Children.toArray(children);
        for (var _i = 0, _children_2 = _children; _i < _children_2.length; _i++) {
            var child = _children_2[_i];
            if (_types.indexOf(typeOfComponent_1.typeOfComponent(child, customTypeKey)) !== -1) {
                return level + 1;
            }
            if ((_a = child.props) === null || _a === void 0 ? void 0 : _a.children) {
                var result = getDepth(child.props.children, level + 1);
                if (result > 0)
                    return result;
            }
        }
        return -1;
    };
    var output = [];
    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
        var child = _children_1[_i];
        var depthToMatch = getDepth(child, -1);
        if (depthToMatch >= 0) {
            output = __spreadArray(__spreadArray([], output), [{ ancestor: child, depthToMatch: depthToMatch }]);
        }
    }
    return output;
};
exports.getDescendantDepthByType = getDescendantDepthByType;
