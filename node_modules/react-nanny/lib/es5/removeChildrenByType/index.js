"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeChildrenByTypeDeep = exports.removeChildrenByType = void 0;
var React = require("react");
var utils_1 = require("./../_private/utils");
var typeOfComponent_1 = require("../typeOfComponent");
/**
 * Removes all children by specified type
 *
 * @since v1.0.0 (modified v2.0.0)
 * @template T
 * @template TC
 * @param {T} children - JSX children
 * @param {TC | TC[]} types - Types of children to match
 * @param {RemoveChildrenByTypeConfig} [config={ customTypeKey: '__TYPE' }] - The configuration params
 * @returns {T[]} - All non-matching children
 * @example
 * // Removes all occurrences of ToDo (custom component), div, and React Fragment
 * removeChildrenByType(children, ['ToDo', 'div', 'react.fragment']);
 *
 * // Removes all occurrences of MyComponent (custom component - from import), a div, and React Fragment
 * import MyComponent from './MyComponent';
 * removeChildrenByType(children, [MyComponent, 'div', 'react.fragment']);
 *
 * // Removes all occurrences of MyComponent (custom component - as React.ReactNode), a div, and React Fragment
 * const component = getChildByType(['MyComponent']);
 * removeChildrenByType(children, [component, 'div', 'react.fragment']);
 *
 * // Removes all occurrences of ToDo (custom component) with a customized {customTypeKey}
 * removeChildrenByType(children, ['ToDo'], { customTypeKey: 'myTypeKey' });
 * @docgen_note
 * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To remove a React Fragment, search for <em>'react.fragment'</em>.
 * @docgen_import { removeChildrenByType, RemoveChildrenByTypeConfig }
 * @docgen_imp_note <em>RemoveChildrenByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects
 */
var removeChildrenByType = function (children, types, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.customTypeKey, customTypeKey = _c === void 0 ? '__TYPE' : _c;
    var _types = utils_1.processTypes(Array.isArray(types) ? types : [types]);
    return React.Children.toArray(children).filter(function (child) { return _types.indexOf(typeOfComponent_1.typeOfComponent(child, customTypeKey)) === -1; });
};
exports.removeChildrenByType = removeChildrenByType;
/**
 * Removes all children by specified type (deep search)
 *
 * @since v1.0.0 (modified v2.0.0)
 * @template T
 * @template TC
 * @param {T} children - JSX children
 * @param {TC | TC[]} types - Types of children to match
 * @param {RemoveChildrenByTypeConfig} [{ customTypeKey: '__TYPE' }] - The configuration params
 * @returns {T[]} - All non-matching children
 * @example
 * // Removes all occurrences of ToDo (custom component), div, and React Fragment
 * removeChildrenByTypeDeep(children, ['ToDo', 'div', 'react.fragment']);
 *
 * // Removes all occurrences of MyComponent (custom component - full component passed in), a div, and React Fragment
 * import MyComponent from './MyComponent';
 * removeChildrenByTypeDeep(children, [MyComponent, 'div', 'react.fragment']);
 *
 * // Removes all occurrences of MyComponent (custom component - as React.ReactNode), a div, and React Fragment
 * const component = getChildByType(['MyComponent']);
 * removeChildrenByTypeDeep(children, [component, 'div', 'react.fragment']);
 *
 * // Removes all occurrences of ToDo (custom component) with a customized {customTypeKey}
 * removeChildrenByTypeDeep(children, ['ToDo'], { customTypeKey: 'myTypeKey' });
 * @docgen_note
 * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To remove a React Fragment, search for <em>'react.fragment'</em>.
 * @docgen_import { removeChildrenByTypeDeep, RemoveChildrenByTypeConfig }
 * @docgen_imp_note <em>RemoveChildrenByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects
 */
var removeChildrenByTypeDeep = function (children, types, _a) {
    var _b;
    var _c = _a === void 0 ? {} : _a, _d = _c.customTypeKey, customTypeKey = _d === void 0 ? '__TYPE' : _d;
    var _children = React.Children.toArray(children);
    var _types = utils_1.processTypes(Array.isArray(types) ? types : [types]);
    var output = [];
    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
        var child = _children_1[_i];
        if (_types.indexOf(typeOfComponent_1.typeOfComponent(child, customTypeKey)) === -1) {
            if ((_b = child.props) === null || _b === void 0 ? void 0 : _b.children) {
                output = __spreadArray(__spreadArray([], output), [
                    Object.assign({}, child, {
                        props: Object.assign({}, child.props, {
                            children: Array.isArray(child.props.children)
                                ? exports.removeChildrenByTypeDeep(child.props.children, _types, { customTypeKey: customTypeKey })
                                : exports.removeChildrenByTypeDeep(child.props.children, _types, { customTypeKey: customTypeKey })[0],
                        }),
                    }),
                ]);
            }
            else {
                output = __spreadArray(__spreadArray([], output), [child]);
            }
        }
    }
    return output;
};
exports.removeChildrenByTypeDeep = removeChildrenByTypeDeep;
