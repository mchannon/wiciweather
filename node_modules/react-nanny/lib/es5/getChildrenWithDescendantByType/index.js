"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getChildrenWithDescendantByType = void 0;
var React = require("react");
var getChildByType_1 = require("../getChildByType");
/**
 * Gets all children by specified type or that have a descendant node in their lineage which match the specified type
 *
 * @since v2.6.0
 * @template T
 * @template TC
 * @param {T} children - JSX children
 * @param {TC | TC[]} types - Types of children to match
 * @param {GetChildrenWithDescendantByTypeConfig} [config={ customTypeKey: '__TYPE' }] - The configuration params
 * @returns {T[]} - All children that match the specified type or have a descendant which matches the specified type
 * @docgen_types
 * // The configuration type for the util:
 * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type
 *
 * export type GetChildrenWithDescendantByTypeConfig = { customTypeKey?: string };
 * @example
 * // Finds all root children that are of type or have a descendant of type ToDo (custom component), div, or React Fragment
 * getChildrenWithDescendantByType(children, ['ToDo', 'div', 'react.fragment']);
 *
 * // Finds all root children that are of type or have a descendant of type MyComponent (custom component - full component passed in), a div, and React Fragment
 * import MyComponent from './MyComponent';
 * getChildrenWithDescendantByType(children, [MyComponent, 'div', 'react.fragment']);
 *
 * // Finds all root children that are of type or have a descendant of type ToDo (custom component) with a customized {customTypeKey}
 * getChildrenWithDescendantByType(children, ['ToDo'], { customTypeKey: 'myTypeKey' });
 * @docgen_note
 * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.
 * @docgen_import { getChildrenWithDescendantByType, GetChildrenWithDescendantByTypeConfig }
 * @docgen_imp_note <em>GetChildrenWithDescendantByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects
 */
var getChildrenWithDescendantByType = function (children, types, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.customTypeKey, customTypeKey = _c === void 0 ? '__TYPE' : _c;
    var _children = React.Children.toArray(children);
    var output = [];
    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
        var child = _children_1[_i];
        if (getChildByType_1.getChildByTypeDeep(child, types, { customTypeKey: customTypeKey, prioritized: false })) {
            output = __spreadArray(__spreadArray([], output), [child]);
        }
    }
    return output;
};
exports.getChildrenWithDescendantByType = getChildrenWithDescendantByType;
