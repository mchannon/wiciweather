import * as React from 'react';
/**
 * Gets first child by specified predicate
 *
 * @since v1.0.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: TChild) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {TChild} - The first matching child
 * @example
 * // Finds the first occurrence of a child that has a prop of 'active' set to true
 * getChild(children, child => child.props.active);
 */
export declare const getChild: <T = React.ReactNode, TC = React.ReactNode>(children: T, predicate: (child: TC) => boolean) => TC;
/**
 * Gets first child by specified predicate (deep search)
 *
 * @since v1.0.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: TC) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {TChild} - The first matching child
 * @example
 * // Finds the first occurrence of a child that has a prop of 'active' set to true
 * getChildDeep(children, child => child.props.active);
 */
export declare const getChildDeep: <T = React.ReactNode, TC = React.ReactNode>(children: T, predicate: (child: TC) => boolean) => TC;
