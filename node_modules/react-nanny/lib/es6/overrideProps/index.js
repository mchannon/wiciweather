var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import * as React from 'react';
/**
 * Immutably override props of the children of the original component and (optionally) the original component
 *
 * @since v2.3.0
 * @param {React.ReactElement} component - The component whose children you want to modify
 * @param {(child: T, index?: number) => object} getChildOverrides - Callback function that returns an object containing the props you wish to override for each child
 * @param {object} [overrides] - Any other props to override on the original component
 * @returns {React.ReactElement} The original component with the children with modified prop values
 * @example *
 * // This will override the active prop for each child component to {true}
 * overrideProps(component, () => ({ active: true }));
 *
 * // This will override the active prop for each child component to {true} where child has a title prop = 'Supervisor'
 * overrideProps(component, child => child.props.title === 'Supervisor' ? ({ active: true }) : {});
 *
 * // This will override the active prop for each child component to {true} and override the hello prop on the root component
 * overrideProps(component, () => ({ active: true }), { hello: 'Hola mundo' });
 * @docgen_description_note
 * This function is a handy shortcut for when you may need to override the props of your child components and is an alternative for writing your own looped <em>React.cloneElement</em> calls.
 */
export var overrideProps = function (component, getChildOverrides, overrides) {
    if (overrides === void 0) { overrides = {}; }
    if (!component)
        return component;
    var _overrides = overrides !== null && overrides !== void 0 ? overrides : {};
    if (!component.props && Object.keys(_overrides).length <= 0)
        return component;
    if (!component.props.children)
        return React.cloneElement(component, _overrides);
    if (Array.isArray(component.props.children)) {
        return React.cloneElement(component, Object.assign(_overrides, {
            children: React.Children.toArray(component.props.children).map(function (child, index) { return React.cloneElement(child, getChildOverrides(child, index)); }),
        }));
    }
    return React.cloneElement(component, Object.assign(_overrides, {
        children: React.cloneElement(component.props.children, getChildOverrides(component.props.children, 0)),
    }));
};
/**
 * Immutably override props of the children and all descendants (deep)
 *
 * @since v2.10.0
 * @param {T} children - JSX children
 * @param {(child: T) => object} getChildOverrides - Callback function that returns an object containing the props you wish to override for each child
 * @returns {TC[]} - All children with modified prop values
 * @example *
 * // This will override the active prop for each child component to {true}
 * overridePropsDeep(children, () => ({ active: true }));
 *
 * // This will override the active prop for each child component to {true} where child has a title prop = 'Supervisor'
 * overridePropsDeep(children, child => child.props.title === 'Supervisor' ? ({ active: true }) : {});
 * @docgen_description_note
 * This function is a handy shortcut for when you may need to override the props of your deeply nested child components and is an alternative for writing your own looped <em>React.cloneElement</em> calls.
 */
export var overridePropsDeep = function (children, getChildOverrides) {
    var _a;
    if (!children)
        return [];
    var _children = React.Children.toArray(children);
    var output = [];
    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
        var child = _children_1[_i];
        if ((_a = child.props) === null || _a === void 0 ? void 0 : _a.children) {
            var _child = React.cloneElement(child, Object.assign(getChildOverrides(child), { children: overridePropsDeep(child.props.children, getChildOverrides) }));
            output = __spreadArray(__spreadArray([], output), [_child]);
        }
        else if (child.props) {
            var _child = React.cloneElement(child, getChildOverrides(child));
            output = __spreadArray(__spreadArray([], output), [_child]);
        }
        else {
            output = __spreadArray(__spreadArray([], output), [child]);
        }
    }
    return output;
};
