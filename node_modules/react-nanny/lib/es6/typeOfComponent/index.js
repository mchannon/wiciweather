/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
/**
 * Gets the string type of the component's {customTypeKey}, string type of the core html (JSX intrinsic) element, or the function type
 *
 * @since v1.0.0
 * @param {any} component - The component to type check
 * @param {string} [customTypeKey='__TYPE'] - The custom component prop key to check the type
 * @returns {string} - The string representation of the type
 * @docgen_note
 * React Fragments will return type 'react.fragment'. Priority will be given to the <em>{customTypeKey}</em> if one exists
 */
export var typeOfComponent = function (component, customTypeKey) {
    if (customTypeKey === void 0) { customTypeKey = '__TYPE'; }
    return ((component === null || component === void 0 ? void 0 : component.props) && component.props[customTypeKey]) ||
        (typeof (component === null || component === void 0 ? void 0 : component.type) === 'string' && component.type) ||
        ((component === null || component === void 0 ? void 0 : component.type) && typeof component.type === 'symbol' && component.type.toString() === 'Symbol(react.fragment)' && 'react.fragment') ||
        (typeof (component === null || component === void 0 ? void 0 : component.type) === 'function' && component.type) ||
        (typeof (component === null || component === void 0 ? void 0 : component.type) === 'object' && component.type.$$typeof.toString() === 'Symbol(react.forward_ref)' && 'react.forward_ref') ||
        (typeof component === 'string' && 'string') ||
        undefined;
};
