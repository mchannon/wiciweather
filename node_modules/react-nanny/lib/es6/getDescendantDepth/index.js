var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import * as React from 'react';
/**
 * Gets the depth to the first descendant (or self) of each root child that match the specified predicate
 *
 * @since v2.6.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: T) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {IDescendantDepth<T>[]} - The oldest ancestor with the depth to the matching descendant
 * @docgen_types
 * // The item type in the returned array:
 * //   ancestor: T - The oldest ancestor of a matching descendant
 * //   depthToMatch: number - The depth to the first predicate match; 0 indicates that the oldest ancestor matches
 *
 * export interface IDescendantDepth<T=React.ReactNode>{ ancestor: T, depthToMatch: number }
 * @docgen_description_note
 * If the child does not match the predicate or have a descendant that matches, the child is not returned with the result.
 */
export var getDescendantDepth = function (children, predicate) {
    var _children = React.Children.toArray(children);
    // recursively get the depth of the first matching child
    var getDepth = function (children, predicate, level) {
        var _a;
        var _children = React.Children.toArray(children);
        for (var _i = 0, _children_2 = _children; _i < _children_2.length; _i++) {
            var child = _children_2[_i];
            if (predicate(child))
                return level + 1;
            if ((_a = child.props) === null || _a === void 0 ? void 0 : _a.children) {
                var result = getDepth(child.props.children, predicate, level + 1);
                if (result > 0)
                    return result;
            }
        }
        return -1;
    };
    var output = [];
    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
        var child = _children_1[_i];
        var depthToMatch = getDepth(child, predicate, -1);
        if (depthToMatch >= 0) {
            output = __spreadArray(__spreadArray([], output), [{ ancestor: child, depthToMatch: depthToMatch }]);
        }
    }
    return output;
};
