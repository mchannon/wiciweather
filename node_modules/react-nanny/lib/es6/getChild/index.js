import * as React from 'react';
/**
 * Gets first child by specified predicate
 *
 * @since v1.0.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: TChild) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {TChild} - The first matching child
 * @example
 * // Finds the first occurrence of a child that has a prop of 'active' set to true
 * getChild(children, child => child.props.active);
 */
export var getChild = function (children, predicate) {
    return React.Children.toArray(children).find(predicate);
};
/**
 * Gets first child by specified predicate (deep search)
 *
 * @since v1.0.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: TC) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {TChild} - The first matching child
 * @example
 * // Finds the first occurrence of a child that has a prop of 'active' set to true
 * getChildDeep(children, child => child.props.active);
 */
export var getChildDeep = function (children, predicate) {
    var _a;
    var _children = React.Children.toArray(children);
    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
        var child = _children_1[_i];
        if (predicate(child))
            return child;
        if ((_a = child.props) === null || _a === void 0 ? void 0 : _a.children) {
            var result = getChildDeep(child.props.children, predicate);
            if (result)
                return result;
        }
    }
    return;
};
