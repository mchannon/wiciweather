var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import * as React from 'react';
import { processTypes } from '../_private/utils';
import { typeOfComponent } from '../typeOfComponent';
/**
 * Gets all children by specified type
 *
 * @since v1.0.0 (modified v2.0.0)
 * @template T
 * @template TC
 * @param {T} children - JSX children
 * @param {TC | TC[]} types - Types of children to match
 * @param {GetChildrenByTypeConfig} [config={ customTypeKey: '__TYPE' }] - The configuration params
 * @returns {T[]} - Array of matching children
 * @docgen_types
 * // The configuration type for the util:
 * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type
 *
 * export type GetChildrenByTypeConfig = { customTypeKey?: string };
 * @example
 * // Finds all occurrences of ToDo (custom component), div, and React Fragment
 * getChildrenByType(children, ['ToDo', 'div', 'react.fragment']);
 *
 * // Finds all occurrences of MyComponent (custom component - full component passed in), a div, and React Fragment
 * import MyComponent from './MyComponent';
 * getChildrenByType(children, [MyComponent, 'div', 'react.fragment']);
 *
 * // Finds all occurrences of ToDo (custom component) with a customized {customTypeKey}
 * getChildrenByType(children, ['ToDo'], { customTypeKey: 'myTypeKey' });
 * @docgen_note
 * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.
 * @docgen_import { getChildrenByType, GetChildrenByTypeConfig }
 * @docgen_imp_note <em>GetChildrenByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects
 */
export var getChildrenByType = function (children, types, _a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.customTypeKey, customTypeKey = _c === void 0 ? '__TYPE' : _c;
    var _types = processTypes(Array.isArray(types) ? types : [types]);
    return React.Children.toArray(children).filter(function (child) { return _types.indexOf(typeOfComponent(child, customTypeKey)) !== -1; });
};
/**
 * Gets all children by specified type (deep search)
 *
 * @since v1.0.0 (modified v2.0.0)
 * @template TC
 * @param {T} children - JSX children
 * @param {TC | TC[]} types - Types of children to match
 * @param {GetChildrenByTypeConfig} [{ customTypeKey: '__TYPE' }] - The configuration params
 * @returns {T[]} - Array of matching children
 * @docgen_types
 * // The configuration type for the util:
 * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type
 *
 * export type GetChildrenByTypeConfig = { customTypeKey?: string };
 * @example
 * // Finds all occurrences of ToDo (custom component), div, and React Fragment
 * getChildrenByTypeDeep(children, ['ToDo', 'div', 'react.fragment']);
 *
 * // Finds all occurrences of MyComponent (custom component - full component passed in), a div, and React Fragment
 * import MyComponent from './MyComponent';
 * getChildrenByTypeDeep(children, [MyComponent, 'div', 'react.fragment']);
 *
 * // Finds all occurrences of ToDo (custom component) with a customized {customTypeKey}
 * getChildrenByTypeDeep(children, ['ToDo'], { customTypeKey: 'myTypeKey' });
 * @docgen_note
 * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.
 * @docgen_import { getChildrenByTypeDeep, GetChildrenByTypeConfig }
 * @docgen_imp_note <em>GetChildrenByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects
 */
export var getChildrenByTypeDeep = function (children, types, _a) {
    var _b;
    var _c = _a === void 0 ? {} : _a, _d = _c.customTypeKey, customTypeKey = _d === void 0 ? '__TYPE' : _d;
    var _children = React.Children.toArray(children);
    var _types = processTypes(Array.isArray(types) ? types : [types]);
    var output = [];
    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
        var child = _children_1[_i];
        if (_types.indexOf(typeOfComponent(child, customTypeKey)) !== -1) {
            output = __spreadArray(__spreadArray([], output), [child]);
        }
        if ((_b = child.props) === null || _b === void 0 ? void 0 : _b.children) {
            output = __spreadArray(__spreadArray([], output), getChildrenByTypeDeep(child.props.children, _types, { customTypeKey: customTypeKey }));
        }
    }
    return output;
};
