import * as React from 'react';
/**
 * Removes all children by specified predicate
 *
 * @since v1.0.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: T) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {T[]} - All non-matching children
 * @example
 * // Removes all children that have an 'active' prop set to false
 * removeChildren(children, child => !child.props.active);
 */
export declare const removeChildren: <T = React.ReactNode, TC = React.ReactNode>(children: T, predicate: (child: TC) => boolean) => TC[];
/**
 * Removes all children by specified predicate (deep search)
 *
 * @since v1.0.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: TC) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {T[]} - All non-matching children
 * @example
 * // Removes all children that have an 'active' prop set to false
 * removeChildrenDeep(children, child => !child.props.active);
 */
export declare const removeChildrenDeep: <T = React.ReactNode, TC = React.ReactNode>(children: T, predicate: (child: TC) => boolean) => TC[];
