/* eslint-disable @typescript-eslint/explicit-module-boundary-types */
import { typeOfComponent } from '../typeOfComponent';
/**
 * Ensure that there is some level of content and not just a bunch of empty divs, spans, etc (deep search)
 *
 * @since v1.0.0
 * @param {any} component - A component, array of components, or content of a component
 * @param {NoEmptyConfig} [config={ ignore: [], rejectCustom: true, rejectEmptyCustom: false }] - Configuration options for custom components
 * @returns {boolean} - Whether or not there is content provided. true = content is provided as children at some depth; false = no content is provided as children at any depth
 * @docgen_types
 * // The configuration type for the util:
 * //   ignore?: string[] = [] - A list of components to ignore; Components in this list will be considered as valid content
 * //   rejectCustom?: boolean = true - Whether or not custom components should be rejected as content
 * //   rejectEmptyCustom?: boolean = false - Whether or not custom components require children to be considered valid content; Note: {rejectCustom} must be set to false in order for this setting to be considered
 *
 * export type NoEmptyConfig = { ignore?: string[], rejectCustom?: boolean, rejectEmptyCustom?: boolean };
 * @example
 * // Ensure that one of the following is true at some level of depth for the children:
 * //   * There is markup with content
 * //   * A 'CustomComponent' is provided
 * //   * A different custom component that has children
 *
 * noEmptyChildrenDeep(component, { ignore: ['CustomComponent'], rejectCustom: false, rejectEmptyCustom: true })
 */
export var noEmptyChildrenDeep = function (component, _a) {
    var _b;
    var _c = _a === void 0 ? {} : _a, _d = _c.ignore, ignore = _d === void 0 ? [] : _d, _e = _c.rejectCustom, rejectCustom = _e === void 0 ? true : _e, _f = _c.rejectEmptyCustom, rejectEmptyCustom = _f === void 0 ? false : _f;
    if (ignore.indexOf(typeOfComponent(component)) >= 0)
        return true;
    if (Array.isArray(component)) {
        for (var _i = 0, component_1 = component; _i < component_1.length; _i++) {
            var item = component_1[_i];
            if (noEmptyChildrenDeep(item, { ignore: ignore, rejectCustom: rejectCustom, rejectEmptyCustom: rejectEmptyCustom })) {
                return true;
            }
        }
        return false;
    }
    if (typeof component.type === 'string' && !component.props) {
        return false;
    }
    if ((typeof component.type === 'string' || (typeOfComponent(component) === 'react.fragment')) && component.props.children) {
        return noEmptyChildrenDeep(component.props.children, { ignore: ignore, rejectCustom: rejectCustom, rejectEmptyCustom: rejectEmptyCustom });
    }
    else if (typeof component.type === 'string' || typeOfComponent(component) === 'react.fragment') {
        return false;
    }
    if ((rejectCustom && isCustom(component)) || (rejectEmptyCustom && isCustom(component) && !((_b = component.props) === null || _b === void 0 ? void 0 : _b.children))) {
        return false;
    }
    return true;
};
var isCustom = function (component) { return typeof component !== 'string' && typeof component.type !== 'string'; };
