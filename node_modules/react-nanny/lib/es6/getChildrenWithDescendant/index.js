var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import * as React from 'react';
import { getChildDeep } from '../getChild';
/**
 * Gets all children by specified predicate or that have a descendant node in their lineage which matches the predicate
 *
 * @since v2.6.0
 * @template T
 * @template TC - Type of child
 * @param {T} children - JSX children
 * @param {(child: TC) => boolean} predicate - The predicate to determine if the given child is a match
 * @returns {TC[]} - All children that match the predicate or have a descendant which matches the predicate
 */
export var getChildrenWithDescendant = function (children, predicate) {
    var _children = React.Children.toArray(children);
    var output = [];
    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {
        var child = _children_1[_i];
        if (getChildDeep(child, predicate)) {
            output = __spreadArray(__spreadArray([], output), [child]);
        }
    }
    return output;
};
