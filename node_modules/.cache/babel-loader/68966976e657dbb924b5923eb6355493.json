{"ast":null,"code":"var _jsxFileName = \"/Users/brandi/wiciweather/src/components/SearchBar.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useEffect, useState } from 'react';\nimport { WeatherContext } from '../context';\nimport { useDebounce } from '../hooks/useDebounce';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Center, Stack, Text } from '@chakra-ui/layout';\nimport { InputGroup, InputRightElement } from '@chakra-ui/input';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { Spinner } from '@chakra-ui/spinner';\nimport { AutoComplete, AutoCompleteInput, AutoCompleteItem, AutoCompleteList } from '@choc-ui/chakra-autocomplete';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst SearchBar = () => {\n  _s();\n\n  const [query, setQuery] = useState('');\n  const [options, setOptions] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const debouncedQuery = useDebounce(query, 750);\n  const {\n    getForecast\n  } = useContext(WeatherContext); // Light mode | Dark mode style\n\n  const color = useColorModeValue('gray.400', 'gray.600');\n  useEffect(() => {\n    const searchWeatherHandler = async search => {\n      try {\n        const response = await fetch(`https://api.weatherapi.com/v1/search.json?key=${process.env.REACT_APP_API_KEY}&q=${search}`);\n\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        const data = await response.json();\n        if (data.length === 0) setIsEmpty(true);\n        setOptions(data);\n      } catch (error) {\n        console.log(`Error: ${error}`);\n      }\n    };\n\n    if (debouncedQuery) {\n      setIsEmpty(false);\n      searchWeatherHandler(debouncedQuery);\n    }\n  }, [debouncedQuery]);\n  const listState = isEmpty ? /*#__PURE__*/_jsxDEV(Center, {\n    py: 2,\n    children: /*#__PURE__*/_jsxDEV(Text, {\n      color: \"gray.500\",\n      children: \"No city or state found!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Center, {\n    py: 2,\n    children: /*#__PURE__*/_jsxDEV(Spinner, {\n      size: \"lg\",\n      thickness: \"4px\",\n      color: \"brand.400\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(Stack, {\n    direction: \"column\",\n    w: \"full\",\n    children: /*#__PURE__*/_jsxDEV(AutoComplete, {\n      rollNavigation: true,\n      maxSuggestions: 5,\n      emptyState: listState,\n      filter: item => item,\n      onSelectOption: _ref => {\n        let {\n          item\n        } = _ref;\n        getForecast(item.value);\n        setQuery(item.value);\n      },\n      children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n        children: [/*#__PURE__*/_jsxDEV(AutoCompleteInput, {\n          variant: \"outline\",\n          placeholder: \"Enter zip code...\",\n          value: query,\n          onChange: event => {\n            setQuery(event.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(InputRightElement, {\n          children: /*#__PURE__*/_jsxDEV(SearchIcon, {\n            color: color\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(AutoCompleteList, {\n        children: options.map(option => /*#__PURE__*/_jsxDEV(AutoCompleteItem, {\n          value: option.name,\n          label: option.value,\n          _focus: {\n            bg: 'brand.400',\n            color: 'brand.900'\n          },\n          children: option.name\n        }, option.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SearchBar, \"tVhd3o8lTMSyDQnhwGgzZpjL7E0=\", false, function () {\n  return [useDebounce, useColorModeValue];\n});\n\n_c = SearchBar;\nexport default SearchBar;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchBar\");","map":{"version":3,"sources":["/Users/brandi/wiciweather/src/components/SearchBar.jsx"],"names":["React","useContext","useEffect","useState","WeatherContext","useDebounce","useColorModeValue","Center","Stack","Text","InputGroup","InputRightElement","SearchIcon","Spinner","AutoComplete","AutoCompleteInput","AutoCompleteItem","AutoCompleteList","SearchBar","query","setQuery","options","setOptions","isEmpty","setIsEmpty","debouncedQuery","getForecast","color","searchWeatherHandler","search","response","fetch","process","env","REACT_APP_API_KEY","ok","Error","statusText","data","json","length","error","console","log","listState","item","value","event","target","map","option","name","bg","id"],"mappings":"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","sourcesContent":["import React, { useContext, useEffect, useState } from 'react';\nimport { WeatherContext } from '../context';\nimport { useDebounce } from '../hooks/useDebounce';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Center, Stack, Text } from '@chakra-ui/layout';\nimport { InputGroup, InputRightElement } from '@chakra-ui/input';\nimport { SearchIcon } from '@chakra-ui/icons';\nimport { Spinner } from '@chakra-ui/spinner';\nimport {\n  AutoComplete,\n  AutoCompleteInput,\n  AutoCompleteItem,\n  AutoCompleteList,\n} from '@choc-ui/chakra-autocomplete';\n\nconst SearchBar = () => {\n  const [query, setQuery] = useState('');\n  const [options, setOptions] = useState([]);\n  const [isEmpty, setIsEmpty] = useState(false);\n  const debouncedQuery = useDebounce(query, 750);\n\n  const { getForecast } = useContext(WeatherContext);\n\n  // Light mode | Dark mode style\n  const color = useColorModeValue('gray.400', 'gray.600');\n\n  useEffect(() => {\n    const searchWeatherHandler = async (search) => {\n      try {\n        const response = await fetch(\n          `https://api.weatherapi.com/v1/search.json?key=${process.env.REACT_APP_API_KEY}&q=${search}`\n        );\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        const data = await response.json();\n        if (data.length === 0) setIsEmpty(true);\n        setOptions(data);\n      } catch (error) {\n        console.log(`Error: ${error}`);\n      }\n    };\n\n    if (debouncedQuery) {\n      setIsEmpty(false);\n      searchWeatherHandler(debouncedQuery);\n    }\n  }, [debouncedQuery]);\n\n  const listState = isEmpty ? (\n    <Center py={2}>\n      <Text color=\"gray.500\">No city or state found!</Text>\n    </Center>\n  ) : (\n    <Center py={2}>\n      <Spinner size=\"lg\" thickness=\"4px\" color=\"brand.400\" />\n    </Center>\n  );\n\n  return (\n    <Stack direction=\"column\" w=\"full\">\n      <AutoComplete\n        rollNavigation\n        maxSuggestions={5}\n        emptyState={listState}\n        filter={(item) => item}\n        onSelectOption={({ item }) => {\n          getForecast(item.value);\n          setQuery(item.value);\n        }}\n      >\n        <InputGroup>\n          <AutoCompleteInput\n            variant=\"outline\"\n            placeholder=\"Enter zip code...\"\n            value={query}\n            onChange={(event) => {\n              setQuery(event.target.value);\n            }}\n          />\n          <InputRightElement>\n            <SearchIcon color={color} />\n          </InputRightElement>\n        </InputGroup>\n        <AutoCompleteList>\n          {options.map((option) => (\n            <AutoCompleteItem\n              key={option.id}\n              value={option.name}\n              label={option.value}\n              _focus={{\n                bg: 'brand.400',\n                color: 'brand.900',\n              }}\n            >\n              {option.name}\n            </AutoCompleteItem>\n          ))}\n        </AutoCompleteList>\n      </AutoComplete>\n    </Stack>\n  );\n};\n\nexport default SearchBar;\n"]},"metadata":{},"sourceType":"module"}