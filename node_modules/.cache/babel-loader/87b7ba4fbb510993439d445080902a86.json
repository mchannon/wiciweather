{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport * as React from 'react';\nimport { getChildByTypeDeep } from '../getChildByType';\n/**\r\n * Gets all children by specified type or that have a descendant node in their lineage which match the specified type\r\n *\r\n * @since v2.6.0\r\n * @template T\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildrenWithDescendantByTypeConfig} [config={ customTypeKey: '__TYPE' }] - The configuration params\r\n * @returns {T[]} - All children that match the specified type or have a descendant which matches the specified type\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n *\r\n * export type GetChildrenWithDescendantByTypeConfig = { customTypeKey?: string };\r\n * @example\r\n * // Finds all root children that are of type or have a descendant of type ToDo (custom component), div, or React Fragment\r\n * getChildrenWithDescendantByType(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds all root children that are of type or have a descendant of type MyComponent (custom component - full component passed in), a div, and React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildrenWithDescendantByType(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds all root children that are of type or have a descendant of type ToDo (custom component) with a customized {customTypeKey}\r\n * getChildrenWithDescendantByType(children, ['ToDo'], { customTypeKey: 'myTypeKey' });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildrenWithDescendantByType, GetChildrenWithDescendantByTypeConfig }\r\n * @docgen_imp_note <em>GetChildrenWithDescendantByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\n\nexport var getChildrenWithDescendantByType = function (children, types, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.customTypeKey,\n      customTypeKey = _c === void 0 ? '__TYPE' : _c;\n\n  var _children = React.Children.toArray(children);\n\n  var output = [];\n\n  for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {\n    var child = _children_1[_i];\n\n    if (getChildByTypeDeep(child, types, {\n      customTypeKey: customTypeKey,\n      prioritized: false\n    })) {\n      output = __spreadArray(__spreadArray([], output), [child]);\n    }\n  }\n\n  return output;\n};","map":{"version":3,"sources":["/Users/brandi/wiciweather/node_modules/react-nanny/lib/es6/getChildrenWithDescendantByType/index.js"],"names":["__spreadArray","to","from","i","il","length","j","React","getChildByTypeDeep","getChildrenWithDescendantByType","children","types","_a","_b","_c","customTypeKey","_children","Children","toArray","output","_i","_children_1","child","prioritized"],"mappings":"AAAA,IAAIA,aAAa,GAAI,QAAQ,KAAKA,aAAd,IAAgC,UAAUC,EAAV,EAAcC,IAAd,EAAoB;AACpE,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,EAAE,GAAGF,IAAI,CAACG,MAArB,EAA6BC,CAAC,GAAGL,EAAE,CAACI,MAAzC,EAAiDF,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIG,CAAC,EAA/D,EACIL,EAAE,CAACK,CAAD,CAAF,GAAQJ,IAAI,CAACC,CAAD,CAAZ;;AACJ,SAAOF,EAAP;AACH,CAJD;;AAKA,OAAO,KAAKM,KAAZ,MAAuB,OAAvB;AACA,SAASC,kBAAT,QAAmC,mBAAnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAIC,+BAA+B,GAAG,UAAUC,QAAV,EAAoBC,KAApB,EAA2BC,EAA3B,EAA+B;AACxE,MAAIC,EAAE,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,EAAhB,GAAqBA,EAA9B;AAAA,MAAkCE,EAAE,GAAGD,EAAE,CAACE,aAA1C;AAAA,MAAyDA,aAAa,GAAGD,EAAE,KAAK,KAAK,CAAZ,GAAgB,QAAhB,GAA2BA,EAApG;;AACA,MAAIE,SAAS,GAAGT,KAAK,CAACU,QAAN,CAAeC,OAAf,CAAuBR,QAAvB,CAAhB;;AACA,MAAIS,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIC,EAAE,GAAG,CAAT,EAAYC,WAAW,GAAGL,SAA/B,EAA0CI,EAAE,GAAGC,WAAW,CAAChB,MAA3D,EAAmEe,EAAE,EAArE,EAAyE;AACrE,QAAIE,KAAK,GAAGD,WAAW,CAACD,EAAD,CAAvB;;AACA,QAAIZ,kBAAkB,CAACc,KAAD,EAAQX,KAAR,EAAe;AAAEI,MAAAA,aAAa,EAAEA,aAAjB;AAAgCQ,MAAAA,WAAW,EAAE;AAA7C,KAAf,CAAtB,EAA4F;AACxFJ,MAAAA,MAAM,GAAGnB,aAAa,CAACA,aAAa,CAAC,EAAD,EAAKmB,MAAL,CAAd,EAA4B,CAACG,KAAD,CAA5B,CAAtB;AACH;AACJ;;AACD,SAAOH,MAAP;AACH,CAXM","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nimport * as React from 'react';\r\nimport { getChildByTypeDeep } from '../getChildByType';\r\n/**\r\n * Gets all children by specified type or that have a descendant node in their lineage which match the specified type\r\n *\r\n * @since v2.6.0\r\n * @template T\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildrenWithDescendantByTypeConfig} [config={ customTypeKey: '__TYPE' }] - The configuration params\r\n * @returns {T[]} - All children that match the specified type or have a descendant which matches the specified type\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n *\r\n * export type GetChildrenWithDescendantByTypeConfig = { customTypeKey?: string };\r\n * @example\r\n * // Finds all root children that are of type or have a descendant of type ToDo (custom component), div, or React Fragment\r\n * getChildrenWithDescendantByType(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds all root children that are of type or have a descendant of type MyComponent (custom component - full component passed in), a div, and React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildrenWithDescendantByType(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds all root children that are of type or have a descendant of type ToDo (custom component) with a customized {customTypeKey}\r\n * getChildrenWithDescendantByType(children, ['ToDo'], { customTypeKey: 'myTypeKey' });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildrenWithDescendantByType, GetChildrenWithDescendantByTypeConfig }\r\n * @docgen_imp_note <em>GetChildrenWithDescendantByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\r\nexport var getChildrenWithDescendantByType = function (children, types, _a) {\r\n    var _b = _a === void 0 ? {} : _a, _c = _b.customTypeKey, customTypeKey = _c === void 0 ? '__TYPE' : _c;\r\n    var _children = React.Children.toArray(children);\r\n    var output = [];\r\n    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {\r\n        var child = _children_1[_i];\r\n        if (getChildByTypeDeep(child, types, { customTypeKey: customTypeKey, prioritized: false })) {\r\n            output = __spreadArray(__spreadArray([], output), [child]);\r\n        }\r\n    }\r\n    return output;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}