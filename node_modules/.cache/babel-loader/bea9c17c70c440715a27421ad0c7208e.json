{"ast":null,"code":"import React, { useRef, useState, useEffect, useImperativeHandle, memo } from 'react';\nimport { createContext } from '@chakra-ui/react-utils';\nimport { useDisclosure, useControllableState, useUpdateEffect, useDimensions, forwardRef, Popover, chakra, useMergeRefs, Flex, Box, Divider, useMultiStyleConfig, Input, Wrap, WrapItem, PopoverContent } from '@chakra-ui/react';\nimport { pick, isDefined, isEmpty, runIfFn, isUndefined, getNextItem, getPrevItem, getFirstItem, getLastItem, callAll, isObject, omit } from '@chakra-ui/utils';\nimport { getChildrenDeep, getChildDeep } from 'react-nanny';\nimport { Flex as Flex$1, Box as Box$1, WrapItem as WrapItem$1 } from '@chakra-ui/layout';\nimport { Tag, TagLabel, TagCloseButton } from '@chakra-ui/tag';\n\nvar _createContext = /*#__PURE__*/createContext({\n  name: \"AutoCompleteContext\",\n  errorMessage: \"useAutoCompleteContext: `context` is undefined. Seems you forgot to wrap all autoomplete components within `<AutoComplete />`\"\n}),\n    AutoCompleteProvider = _createContext[0],\n    useAutoCompleteContext = _createContext[1];\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) {\n  var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"];\n  if (it) return (it = it.call(o)).next.bind(it);\n\n  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n    if (it) o = it;\n    var i = 0;\n    return function () {\n      if (i >= o.length) return {\n        done: true\n      };\n      return {\n        done: false,\n        value: o[i++]\n      };\n    };\n  }\n\n  throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n/*\r\n * @param str1 The first string to compare.\r\n * @param str2 The second string to compare.\r\n * @param gramSize The size of the grams. Defaults to length 2.\r\n */\n\n\nfunction fuzzyScore(str1, str2, gramSize) {\n  if (gramSize === void 0) {\n    gramSize = 2;\n  }\n\n  function getNGrams(s, len) {\n    s = \" \".repeat(len - 1) + s.toLowerCase() + \" \".repeat(len - 1);\n    var v = new Array(s.length - len + 1);\n\n    for (var i = 0; i < v.length; i++) {\n      v[i] = s.slice(i, i + len);\n    }\n\n    return v;\n  }\n\n  if (!(str1 != null && str1.length) || !(str2 != null && str2.length)) {\n    return 0.0;\n  } //Order the strings by length so the order they're passed in doesn't matter\n  //and so the smaller string's ngrams are always the ones in the set\n\n\n  var s1 = str1.length < str2.length ? str1 : str2;\n  var s2 = str1.length < str2.length ? str2 : str1;\n  var pairs1 = getNGrams(s1, gramSize);\n  var pairs2 = getNGrams(s2, gramSize);\n  var set = new Set(pairs1);\n  var total = pairs2.length;\n  var hits = 0;\n\n  for (var _iterator = _createForOfIteratorHelperLoose(pairs2), _step; !(_step = _iterator()).done;) {\n    var item = _step.value;\n\n    if (set[\"delete\"](item)) {\n      hits++;\n    }\n  }\n\n  return hits / total;\n}\n\nvar getDefItemValue = function getDefItemValue(item) {\n  return (typeof item === \"string\" ? item : item[Object.keys(item)[0]]).toString();\n};\n\nvar setEmphasis = function setEmphasis(children, query) {\n  if (typeof children !== \"string\" || isEmpty(query)) {\n    return children;\n  }\n\n  var newChildren = children.toString().replace(new RegExp(escapeRegex(query), \"gi\"), function (match) {\n    return \"<mark>\" + match + \"</mark>\";\n  });\n  return newChildren;\n};\n\nvar getItemList = function getItemList(children) {\n  var itemChildren = getChildrenDeep(children, function (child) {\n    var _child$type;\n\n    return (child == null ? void 0 : (_child$type = child.type) == null ? void 0 : _child$type.displayName) === \"AutoCompleteItem\";\n  });\n  return itemChildren.map(function (item) {\n    var itemObj = pick(item.props, [\"value\", \"label\", \"fixed\", \"disabled\"]);\n    var _item$props$getValue = item.props.getValue,\n        getValue = _item$props$getValue === void 0 ? getDefItemValue : _item$props$getValue;\n    var value = getValue(itemObj.value);\n    var finObj = isDefined(itemObj.label) ? itemObj : _extends({}, itemObj, {\n      label: value\n    });\n    return _extends({}, finObj, {\n      value: value,\n      originalValue: itemObj.value\n    });\n  });\n};\n\nvar getFocusedStyles = function getFocusedStyles() {\n  return {\n    bg: \"whiteAlpha.100\",\n    _light: {\n      bg: \"gray.200\"\n    }\n  };\n};\n\nvar defaultFilterMethod = function defaultFilterMethod(query, itemValue, itemLabel) {\n  return (itemValue == null ? void 0 : itemValue.toLowerCase().indexOf(query == null ? void 0 : query.toLowerCase())) >= 0 || (itemLabel == null ? void 0 : itemLabel.toLowerCase().indexOf(query == null ? void 0 : query.toLowerCase())) >= 0 || fuzzyScore(query, itemValue) >= 0.5 || fuzzyScore(query, itemLabel) >= 0.5;\n};\n\nfunction escapeRegex(string) {\n  return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n\nvar getMultipleWrapStyles = function getMultipleWrapStyles(themeInput, multiple) {\n  return _extends({}, multiple && _extends({}, themeInput.field, {\n    _focusWithin: themeInput.field._focus,\n    pos: \"relative\",\n    minH: 9,\n    // px: 3,\n    py: 1.5,\n    spacing: 3\n  }), {\n    cursor: \"text\",\n    h: \"fit-content\"\n  });\n};\n\nvar hasFirstItem = function hasFirstItem(children, firstItem) {\n  var result = getChildDeep(children, function (child) {\n    var _child$type;\n\n    return (child == null ? void 0 : (_child$type = child.type) == null ? void 0 : _child$type.displayName) === \"AutoCompleteItem\" && child.props.value === (firstItem == null ? void 0 : firstItem.value);\n  });\n  return result;\n};\n\nvar hasLastItem = function hasLastItem(children, lastItem) {\n  var result = getChildDeep(children, function (child) {\n    var _child$type2;\n\n    return (child == null ? void 0 : (_child$type2 = child.type) == null ? void 0 : _child$type2.displayName) === \"AutoCompleteItem\" && child.props.value === (lastItem == null ? void 0 : lastItem.value);\n  });\n  return result;\n};\n\nvar hasChildren = function hasChildren(children, filteredList) {\n  return isDefined(getChildDeep(children, function (child) {\n    return filteredList.findIndex(function (i) {\n      var _child$props;\n\n      return i.value === ((_child$props = child.props) == null ? void 0 : _child$props.value);\n    }) >= 0;\n  }));\n};\n\nvar _excluded = [\"onBlur\", \"onChange\", \"onFocus\", \"onKeyDown\", \"variant\"],\n    _excluded2 = [\"_fixed\", \"_focus\", \"children\", \"disabled\", \"label\", \"value\", \"fixed\", \"getValue\", \"onClick\", \"onMouseOver\", \"sx\"];\n/**\r\n * useAutoComplete that provides all the state and focus management logic\r\n * for the autocomplete component. It is consumed by the `Autocomplete` component\r\n *\r\n */\n\nfunction useAutoComplete(autoCompleteProps) {\n  var _defaultQuery, _itemList$;\n\n  var _autoCompleteProps$cl = autoCompleteProps.closeOnBlur,\n      closeOnBlur = _autoCompleteProps$cl === void 0 ? true : _autoCompleteProps$cl,\n      closeOnSelect = autoCompleteProps.closeOnSelect,\n      creatable = autoCompleteProps.creatable,\n      emphasize = autoCompleteProps.emphasize,\n      _autoCompleteProps$em = autoCompleteProps.emptyState,\n      emptyState = _autoCompleteProps$em === void 0 ? true : _autoCompleteProps$em,\n      freeSolo = autoCompleteProps.freeSolo,\n      isReadOnly = autoCompleteProps.isReadOnly,\n      listAllValuesOnFocus = autoCompleteProps.listAllValuesOnFocus,\n      maxSuggestions = autoCompleteProps.maxSuggestions,\n      multiple = autoCompleteProps.multiple,\n      defaultValue = autoCompleteProps.defaultValue,\n      _autoCompleteProps$de = autoCompleteProps.defaultValues,\n      defaultValues = _autoCompleteProps$de === void 0 ? defaultValue ? [defaultValue] : [] : _autoCompleteProps$de,\n      onReady = autoCompleteProps.onReady,\n      defaultIsOpen = autoCompleteProps.defaultIsOpen,\n      _autoCompleteProps$re = autoCompleteProps.restoreOnBlurIfEmpty,\n      restoreOnBlurIfEmpty = _autoCompleteProps$re === void 0 ? !freeSolo : _autoCompleteProps$re,\n      _autoCompleteProps$sh = autoCompleteProps.shouldRenderSuggestions,\n      shouldRenderSuggestions = _autoCompleteProps$sh === void 0 ? function () {\n    return true;\n  } : _autoCompleteProps$sh,\n      _autoCompleteProps$su = autoCompleteProps.submitKeys,\n      submitKeys = _autoCompleteProps$su === void 0 ? [] : _autoCompleteProps$su,\n      suggestWhenEmpty = autoCompleteProps.suggestWhenEmpty,\n      value = autoCompleteProps.value,\n      _autoCompleteProps$va = autoCompleteProps.values,\n      valuesProp = _autoCompleteProps$va === void 0 ? value ? typeof value === \"string\" ? [value] : [].concat(value) : undefined : _autoCompleteProps$va;\n  closeOnSelect = closeOnSelect ? closeOnSelect : multiple ? false : true;\n  freeSolo = freeSolo ? freeSolo : multiple ? true : autoCompleteProps.freeSolo;\n\n  var _useDisclosure = useDisclosure({\n    defaultIsOpen: defaultIsOpen\n  }),\n      isOpen = _useDisclosure.isOpen,\n      onClose = _useDisclosure.onClose,\n      onOpen = _useDisclosure.onOpen;\n\n  var children = runIfFn(autoCompleteProps.children, {\n    isOpen: isOpen,\n    onClose: onClose,\n    onOpen: onOpen\n  });\n  var itemList = getItemList(children);\n  var inputRef = useRef(null);\n  var inputWrapperRef = useRef(null);\n  var listRef = useRef(null);\n  var interactionRef = useRef(null);\n\n  var _useState = useState(false),\n      listAll = _useState[0],\n      setListAll = _useState[1];\n\n  var defaultQuery = \"\";\n  if (multiple) defaultQuery = \"\";else if (!isUndefined(defaultValues)) defaultQuery = defaultValues[0];else if (!isUndefined(valuesProp)) defaultQuery = valuesProp[0];\n\n  var _useState2 = useState((_defaultQuery = defaultQuery) != null ? _defaultQuery : \"\"),\n      query = _useState2[0],\n      setQuery = _useState2[1];\n\n  var filteredResults = itemList.filter(function (i) {\n    return i.fixed || runIfFn(autoCompleteProps.filter || defaultFilterMethod, query, i.value, i.label) || listAll;\n  }).filter(function (i, index) {\n    return maxSuggestions ? i.fixed || index < maxSuggestions : true;\n  }); // Add Creatable to Filtered List\n\n  var creatableArr = creatable ? [{\n    value: query,\n    noFilter: true,\n    creatable: true\n  }] : [];\n  var filteredList = [].concat(filteredResults, creatableArr);\n\n  var _useControllableState = useControllableState({\n    defaultValue: defaultValues,\n    value: valuesProp,\n    onChange: function onChange(newValues) {\n      var item = filteredList.find(function (opt) {\n        return opt.value === newValues[0];\n      });\n      var items = newValues.map(function (val) {\n        return filteredList.find(function (opt) {\n          return opt.value === val;\n        });\n      });\n      runIfFn(autoCompleteProps.onChange, multiple ? newValues : newValues[0], multiple ? items : item);\n    }\n  }),\n      values = _useControllableState[0],\n      setValues = _useControllableState[1];\n\n  var _useState3 = useState((_itemList$ = itemList[0]) == null ? void 0 : _itemList$.value),\n      focusedValue = _useState3[0],\n      setFocusedValue = _useState3[1];\n\n  var maxSelections = autoCompleteProps.maxSelections || values.length + 1;\n  var focusedIndex = filteredList.findIndex(function (i) {\n    return i.value === focusedValue;\n  });\n  var nextItem = getNextItem(focusedIndex, filteredList, !!autoCompleteProps.rollNavigation);\n  var prevItem = getPrevItem(focusedIndex, filteredList, !!autoCompleteProps.rollNavigation);\n  var firstItem = getFirstItem(filteredList);\n  var lastItem = getLastItem(filteredList);\n  useUpdateEffect(function () {\n    setFocusedValue(firstItem == null ? void 0 : firstItem.value);\n  }, [query]);\n  useEffect(function () {\n    var _itemList$2;\n\n    if (!isOpen) setFocusedValue((_itemList$2 = itemList[0]) == null ? void 0 : _itemList$2.value);\n  }, [isOpen]);\n  useEffect(function () {\n    var focusedItem = itemList.find(function (i) {\n      return i.value === focusedValue;\n    });\n    runIfFn(autoCompleteProps.onOptionFocus, {\n      item: focusedItem,\n      focusMethod: interactionRef.current,\n      isNewInput: focusedItem == null ? void 0 : focusedItem.creatable\n    });\n  }, [focusedValue, autoCompleteProps.onOptionFocus]);\n\n  var selectItem = function selectItem(optionValue) {\n    var _inputRef$current2;\n\n    if (!values.includes(optionValue) && values.length < maxSelections) {\n      setValues(function (v) {\n        return multiple ? [].concat(v, [optionValue]) : [optionValue];\n      });\n    }\n\n    var option = filteredList.find(function (i) {\n      return i.value === optionValue;\n    });\n\n    if (multiple) {\n      var _inputRef$current;\n\n      (_inputRef$current = inputRef.current) == null ? void 0 : _inputRef$current.focus();\n    }\n\n    if (autoCompleteProps.focusInputOnSelect) (_inputRef$current2 = inputRef.current) == null ? void 0 : _inputRef$current2.focus();\n    runIfFn(autoCompleteProps.onSelectOption, {\n      item: option,\n      selectMethod: interactionRef.current,\n      isNewInput: option == null ? void 0 : option.creatable\n    });\n\n    if (option != null && option.creatable) {\n      runIfFn(autoCompleteProps.onCreateOption, {\n        item: omit(option, [\"noFilter\"]),\n        selectMethod: interactionRef.current\n      });\n    }\n\n    var optionLabel = (option == null ? void 0 : option.label) || (option == null ? void 0 : option.value);\n    setQuery(function () {\n      return multiple ? \"\" : optionLabel != null ? optionLabel : \"\";\n    });\n    if (closeOnSelect) onClose();\n  };\n\n  var removeItem = function removeItem(itemValue, focusInput) {\n    var _inputRef$current3;\n\n    setValues(function (prevValues) {\n      var item = itemList.find(function (opt) {\n        return opt.value === itemValue;\n      });\n      runIfFn(autoCompleteProps.onTagRemoved, itemValue, item, prevValues);\n      return prevValues.filter(function (i) {\n        return i !== itemValue;\n      });\n    });\n    if (query === itemValue) setQuery(\"\");\n    if (focusInput) (_inputRef$current3 = inputRef.current) == null ? void 0 : _inputRef$current3.focus();\n  };\n\n  var resetItems = function resetItems(focusInput) {\n    var _inputRef$current4;\n\n    setValues([]);\n    if (focusInput) (_inputRef$current4 = inputRef.current) == null ? void 0 : _inputRef$current4.focus();\n  };\n\n  var tags = multiple ? values.map(function (tag) {\n    var _itemList$find;\n\n    return {\n      label: ((_itemList$find = itemList.find(function (item) {\n        return item.value === tag;\n      })) == null ? void 0 : _itemList$find.label) || tag,\n      onRemove: function onRemove() {\n        return removeItem(tag);\n      }\n    };\n  }) : [];\n  useEffect(function () {\n    runIfFn(onReady, {\n      tags: tags\n    });\n  }, [values]);\n\n  var getInputProps = function getInputProps(props, themeInput) {\n    var _onBlur = props.onBlur,\n        _onChange = props.onChange,\n        _onFocus = props.onFocus,\n        _onKeyDown = props.onKeyDown,\n        variant = props.variant,\n        rest = _objectWithoutPropertiesLoose(props, _excluded);\n\n    return {\n      wrapper: _extends({\n        ref: inputWrapperRef,\n        onClick: function onClick() {\n          var _inputRef$current5;\n\n          inputRef == null ? void 0 : (_inputRef$current5 = inputRef.current) == null ? void 0 : _inputRef$current5.focus();\n        }\n      }, getMultipleWrapStyles(themeInput, multiple), rest),\n      input: _extends({\n        isReadOnly: isReadOnly,\n        onFocus: function onFocus(e) {\n          runIfFn(_onFocus, e);\n          if (autoCompleteProps.openOnFocus && !isReadOnly) onOpen();\n          if (autoCompleteProps.selectOnFocus) e.target.select();\n          if (listAllValuesOnFocus) setListAll(true);\n        },\n        onBlur: function onBlur(e) {\n          var _inputWrapperRef$curr;\n\n          runIfFn(_onBlur, e);\n          var listIsFocused = e.relatedTarget === (listRef == null ? void 0 : listRef.current);\n          var inputWrapperIsFocused = (_inputWrapperRef$curr = inputWrapperRef.current) == null ? void 0 : _inputWrapperRef$curr.contains(e.relatedTarget);\n\n          if (!listIsFocused && !inputWrapperIsFocused) {\n            if (closeOnBlur) onClose();\n\n            if (!values.includes(e.target.value) && restoreOnBlurIfEmpty) {\n              var latestValue = getLastItem(values);\n              var latestValueItem = itemList.find(function (i) {\n                return i.value === latestValue;\n              });\n              var latestValueLabel = (latestValueItem == null ? void 0 : latestValueItem.label) || (latestValueItem == null ? void 0 : latestValueItem.value) || \"\";\n              setQuery(latestValueLabel);\n            }\n          }\n        },\n        onChange: function onChange(e) {\n          var newValue = e.target.value;\n          runIfFn(_onChange, e);\n          setQuery(newValue);\n          var queryIsEmpty = isEmpty(newValue);\n          if (runIfFn(shouldRenderSuggestions, newValue) && (!queryIsEmpty || suggestWhenEmpty)) onOpen();else onClose();\n          setListAll(false);\n        },\n        onKeyDown: function onKeyDown(e) {\n          runIfFn(_onKeyDown, e);\n          interactionRef.current = \"keyboard\";\n          var key = e.key;\n          var focusedItem = filteredList[focusedIndex];\n\n          if ([\"Enter\"].concat(submitKeys).includes(key)) {\n            var _inputRef$current6;\n\n            if (focusedItem && !(focusedItem != null && focusedItem.disabled)) selectItem(focusedItem == null ? void 0 : focusedItem.value);else (_inputRef$current6 = inputRef.current) == null ? void 0 : _inputRef$current6.focus();\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"ArrowDown\") {\n            setFocusedValue(nextItem == null ? void 0 : nextItem.value);\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"ArrowUp\") {\n            setFocusedValue(prevItem == null ? void 0 : prevItem.value);\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"Tab\") {\n            setFocusedValue(nextItem == null ? void 0 : nextItem.value);\n\n            if (isOpen) {\n              if (focusedItem.value === (lastItem == null ? void 0 : lastItem.value)) {\n                console.log(\"last\");\n              }\n\n              e.preventDefault();\n            }\n\n            return;\n          }\n\n          if (key === \"Home\") {\n            setFocusedValue(firstItem == null ? void 0 : firstItem.value);\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"End\") {\n            setFocusedValue(lastItem == null ? void 0 : lastItem.value);\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"Escape\") {\n            callAll(onClose, e.preventDefault);\n          }\n        },\n        value: query,\n        variant: multiple ? \"unstyled\" : variant\n      }, rest)\n    };\n  };\n\n  var wrapperDim = useDimensions(inputWrapperRef, true);\n  var inputDim = useDimensions(inputRef, true);\n\n  var getListProps = function getListProps() {\n    var width = autoCompleteProps.multiple ? wrapperDim == null ? void 0 : wrapperDim.marginBox.width : inputDim == null ? void 0 : inputDim.marginBox.width;\n    return {\n      width: width\n    };\n  };\n\n  var getItemProps = function getItemProps(props, creatable) {\n    var _getValue;\n\n    var _fixed = props._fixed,\n        _focus = props._focus,\n        itemChild = props.children,\n        disabled = props.disabled,\n        label = props.label,\n        valueProp = props.value,\n        fixed = props.fixed,\n        _props$getValue = props.getValue,\n        getValue = _props$getValue === void 0 ? getDefItemValue : _props$getValue,\n        _onClick = props.onClick,\n        _onMouseOver = props.onMouseOver,\n        sx = props.sx,\n        rest = _objectWithoutPropertiesLoose(props, _excluded2);\n\n    var value = creatable ? valueProp : (_getValue = getValue(valueProp)) == null ? void 0 : _getValue.toString();\n    var isFocused = value === focusedValue;\n    var isValidSuggestion = filteredList.findIndex(function (i) {\n      return i.value === value;\n    }) >= 0;\n    var itemLabel = itemChild || label || value;\n    return {\n      item: _extends({}, typeof itemLabel !== \"string\" || !emphasize ? {\n        children: itemLabel\n      } : {\n        dangerouslySetInnerHTML: {\n          __html: setEmphasis(itemLabel, query)\n        }\n      }, {\n        \"aria-selected\": values.includes(value),\n        \"aria-disabled\": disabled,\n        _disabled: {\n          opacity: 0.4,\n          cursor: \"not-allowed\",\n          userSelect: \"none\"\n        },\n        onClick: function onClick(e) {\n          var _inputRef$current7;\n\n          runIfFn(_onClick, e);\n          if (!disabled) selectItem(value);else (_inputRef$current7 = inputRef.current) == null ? void 0 : _inputRef$current7.focus();\n        },\n        onMouseOver: function onMouseOver(e) {\n          runIfFn(_onMouseOver, e);\n          setFocusedValue(value);\n          interactionRef.current = \"mouse\";\n        },\n        sx: _extends({}, sx, {\n          mark: _extends({\n            color: \"inherit\",\n            bg: \"transparent\"\n          }, isObject(emphasize) ? emphasize : {\n            fontWeight: emphasize ? \"extrabold\" : \"inherit\"\n          })\n        })\n      }, isFocused && (_focus || getFocusedStyles()), fixed && _fixed, rest),\n      root: {\n        isValidSuggestion: isValidSuggestion,\n        value: value\n      }\n    };\n  };\n\n  var getGroupProps = function getGroupProps(props) {\n    var hasItems = hasChildren(props.children, filteredList);\n    return {\n      divider: {\n        hasFirstChild: hasFirstItem(props.children, firstItem),\n        hasLastChild: hasLastItem(props.children, getLastItem(filteredList.filter(function (i) {\n          return isUndefined(i == null ? void 0 : i.noFilter);\n        })))\n      },\n      group: {\n        display: hasItems ? \"initial\" : \"none\"\n      }\n    };\n  };\n\n  var getEmptyStateProps = function getEmptyStateProps(defaultEmptyState) {\n    var noSuggestions = filteredList.every(function (i) {\n      return i.noFilter;\n    });\n\n    if (noSuggestions && emptyState && !creatable) {\n      return typeof emptyState === \"boolean\" ? defaultEmptyState : runIfFn(emptyState, {\n        query: query\n      });\n    }\n  };\n\n  return {\n    autoCompleteProps: autoCompleteProps,\n    children: children,\n    filteredList: filteredList,\n    filteredResults: filteredResults,\n    focusedValue: focusedValue,\n    getEmptyStateProps: getEmptyStateProps,\n    getGroupProps: getGroupProps,\n    getInputProps: getInputProps,\n    getItemProps: getItemProps,\n    getListProps: getListProps,\n    inputRef: inputRef,\n    interactionRef: interactionRef,\n    isOpen: isOpen,\n    itemList: itemList,\n    listRef: listRef,\n    onClose: onClose,\n    onOpen: onOpen,\n    query: query,\n    removeItem: removeItem,\n    resetItems: resetItems,\n    setQuery: setQuery,\n    tags: tags,\n    values: values\n  };\n}\n\nvar AutoComplete = /*#__PURE__*/forwardRef(function (props, ref) {\n  var context = useAutoComplete(props);\n  var children = context.children,\n      isOpen = context.isOpen,\n      onClose = context.onClose,\n      onOpen = context.onOpen,\n      resetItems = context.resetItems,\n      removeItem = context.removeItem;\n  useImperativeHandle(ref, function () {\n    return {\n      resetItems: resetItems,\n      removeItem: removeItem\n    };\n  });\n  return React.createElement(AutoCompleteProvider, {\n    value: context\n  }, React.createElement(Popover, {\n    isLazy: true,\n    isOpen: isOpen,\n    onClose: onClose,\n    onOpen: onOpen,\n    autoFocus: false,\n    placement: \"bottom\",\n    closeOnBlur: true\n  }, React.createElement(chakra.div, {\n    sx: {\n      \".chakra-popover__popper\": {\n        position: \"unset !important\"\n      }\n    },\n    w: \"full\",\n    ref: ref\n  }, children)));\n});\nAutoComplete.displayName = \"AutoComplete\";\nvar _excluded$1 = [\"children\", \"dangerouslySetInnerHTML\"];\nvar AutoCompleteItem = /*#__PURE__*/forwardRef(function (props, forwardedRef) {\n  var _useAutoCompleteConte = useAutoCompleteContext(),\n      focusedValue = _useAutoCompleteConte.focusedValue,\n      getItemProps = _useAutoCompleteConte.getItemProps,\n      interactionRef = _useAutoCompleteConte.interactionRef;\n\n  var itemRef = useRef();\n  var ref = useMergeRefs(forwardedRef, itemRef);\n  var itemProps = getItemProps(props);\n  var _itemProps$root = itemProps.root,\n      isValidSuggestion = _itemProps$root.isValidSuggestion,\n      value = _itemProps$root.value;\n  var isFocused = focusedValue === value;\n  useEffect(function () {\n    var _itemRef$current;\n\n    if (isFocused && interactionRef.current === \"keyboard\") itemRef == null ? void 0 : (_itemRef$current = itemRef.current) == null ? void 0 : _itemRef$current.scrollIntoView({\n      behavior: \"smooth\",\n      block: \"center\"\n    });\n  }, [isFocused, interactionRef]);\n  useEffect(function () {\n    if (typeof value !== \"string\") console.warn(\"wow\");\n    if (typeof value !== \"string\" && isUndefined(props.getValue)) console.error(\"You must define the `getValue` prop, when an Item's value is not a string\");\n  }, []);\n\n  var _itemProps$item = itemProps.item,\n      children = _itemProps$item.children,\n      dangerouslySetInnerHTML = _itemProps$item.dangerouslySetInnerHTML,\n      restProps = _objectWithoutPropertiesLoose(_itemProps$item, _excluded$1);\n\n  var rest = omit(restProps, [\"groupId\"]);\n  return isValidSuggestion ? React.createElement(Flex, Object.assign({\n    ref: ref\n  }, baseItemStyles, rest), children ? children : React.createElement(\"span\", {\n    dangerouslySetInnerHTML: dangerouslySetInnerHTML\n  })) : null;\n});\nAutoCompleteItem.displayName = \"AutoCompleteItem\";\nvar baseItemStyles = {\n  mx: \"2\",\n  px: \"2\",\n  py: \"2\",\n  rounded: \"md\",\n  cursor: \"pointer\"\n};\nvar _excluded$2 = [\"children\"],\n    _excluded2$1 = [\"children\"];\n\nfunction AutoCompleteCreatable(props) {\n  var childrenProp = props.children,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$2);\n\n  var _useAutoCompleteConte = useAutoCompleteContext(),\n      autoCompleteProps = _useAutoCompleteConte.autoCompleteProps,\n      getItemProps = _useAutoCompleteConte.getItemProps,\n      query = _useAutoCompleteConte.query,\n      filteredResults = _useAutoCompleteConte.filteredResults;\n\n  var queryValue = React.createElement(\"mark\", null, query);\n\n  var _getItemProps$item = getItemProps(_extends({}, props, {\n    value: query,\n    children: runIfFn(childrenProp, {\n      value: queryValue\n    })\n  }), true).item,\n      children = _getItemProps$item.children,\n      itemProps = _objectWithoutPropertiesLoose(_getItemProps$item, _excluded2$1);\n\n  var queryExistsInList = filteredResults.some(function (i) {\n    return i.value === query;\n  });\n  var showCreatable = autoCompleteProps.creatable && !isEmpty(query) && !queryExistsInList;\n  return showCreatable ? React.createElement(Flex, Object.assign({}, baseItemStyles, itemProps, rest), children || \"Add \" + query) : null;\n}\n\nAutoCompleteCreatable.displayName = \"AutoCompleteCreatable\";\nvar _excluded$3 = [\"children\", \"showDivider\"];\nvar AutoCompleteGroup = /*#__PURE__*/forwardRef(function (props, ref) {\n  var children = props.children,\n      restProps = _objectWithoutPropertiesLoose(props, _excluded$3);\n\n  var rest = omit(restProps, [\"groupSibling\"]);\n\n  var _useAutoCompleteConte = useAutoCompleteContext(),\n      getGroupProps = _useAutoCompleteConte.getGroupProps;\n\n  var _getGroupProps = getGroupProps(props),\n      group = _getGroupProps.group;\n\n  var dividerStyles = useDividerStyles(props);\n  return React.createElement(Box, Object.assign({\n    ref: ref\n  }, group, rest), React.createElement(Divider, Object.assign({}, dividerStyles.top)), children, React.createElement(Divider, Object.assign({}, dividerStyles.bottom)));\n});\nvar AutoCompleteGroupTitle = /*#__PURE__*/forwardRef(function (props, ref) {\n  return React.createElement(Flex, Object.assign({}, baseTitleStyles, props, {\n    ref: ref\n  }));\n});\nAutoCompleteGroup.displayName = \"AutoCompleteGroup\";\nAutoCompleteGroupTitle.displayName = \"AutoCompleteGroupTitle\";\nvar baseTitleStyles = {\n  ml: 5,\n  my: 1,\n  fontSize: \"xs\",\n  letterSpacing: \"wider\",\n  fontWeight: \"extrabold\",\n  textTransform: \"uppercase\"\n};\n\nvar useDividerStyles = function useDividerStyles(props) {\n  var _useAutoCompleteConte2 = useAutoCompleteContext(),\n      getGroupProps = _useAutoCompleteConte2.getGroupProps;\n\n  var hasGroupSibling = props.groupSibling;\n\n  var _getGroupProps2 = getGroupProps(props),\n      _getGroupProps2$divid = _getGroupProps2.divider,\n      hasFirstChild = _getGroupProps2$divid.hasFirstChild,\n      hasLastChild = _getGroupProps2$divid.hasLastChild;\n\n  var baseStyles = {\n    my: 2,\n    borderColor: props.dividerColor\n  };\n\n  var top = _extends({}, baseStyles, {\n    mb: 4,\n    display: !props.showDivider || hasFirstChild ? \"none\" : \"\"\n  });\n\n  var bottom = _extends({}, baseStyles, {\n    display: !props.showDivider || hasLastChild || hasGroupSibling ? \"none\" : \"\"\n  });\n\n  return {\n    top: top,\n    bottom: bottom\n  };\n};\n\nvar _excluded$4 = [\"children\"],\n    _excluded2$2 = [\"ref\"];\nvar AutoCompleteInput = /*#__PURE__*/forwardRef(function (props, forwardedRef) {\n  var _useAutoCompleteConte = useAutoCompleteContext(),\n      autoCompleteProps = _useAutoCompleteConte.autoCompleteProps,\n      inputRef = _useAutoCompleteConte.inputRef,\n      getInputProps = _useAutoCompleteConte.getInputProps,\n      tags = _useAutoCompleteConte.tags; // const ref = useMergeRefs(forwardedRef, inputRef);\n\n\n  var childrenProp = props.children,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$4);\n\n  var themeInput = useMultiStyleConfig(\"Input\", props);\n\n  var _getInputProps = getInputProps(rest, themeInput),\n      wrapper = _getInputProps.wrapper,\n      inputProps = _getInputProps.input;\n\n  var wrapperRef = wrapper.ref,\n      wrapperProps = _objectWithoutPropertiesLoose(wrapper, _excluded2$2);\n\n  var ref = useMergeRefs(forwardedRef, inputRef);\n  var children = runIfFn(childrenProp, {\n    tags: tags\n  });\n  var simpleInput = React.createElement(Input, Object.assign({}, inputProps, {\n    ref: ref\n  }));\n  var multipleInput = React.createElement(Wrap, Object.assign({}, wrapperProps, {\n    ref: wrapperRef\n  }), children, React.createElement(WrapItem, Object.assign({\n    as: Input\n  }, inputProps, {\n    ref: ref\n  })));\n  return React.createElement(React.Fragment, null, autoCompleteProps.multiple ? multipleInput : simpleInput);\n});\nAutoCompleteInput.displayName = \"Input\";\nAutoCompleteInput.id = \"Input\";\n\nvar EmptyState = function EmptyState(props) {\n  var _useAutoCompleteConte = useAutoCompleteContext(),\n      getEmptyStateProps = _useAutoCompleteConte.getEmptyStateProps;\n\n  var emptyState = getEmptyStateProps(React.createElement(Flex$1, Object.assign({}, emptyStyles), \"No options found!\"));\n  return React.createElement(Box$1, Object.assign({}, props), emptyState);\n};\n\nvar emptyStyles = {\n  fontSize: \"sm\",\n  align: \"center\",\n  justify: \"center\",\n  fontWeight: \"bold\",\n  fontStyle: \"italic\"\n};\n\nvar siblingInfo = function siblingInfo(children) {\n  return React.Children.map(children, function (child, i) {\n    if (child.type.displayName === \"AutoCompleteGroup\") {\n      var sibling = React.Children.toArray(children)[i + 1];\n      return React.cloneElement(child, {\n        groupSibling: sibling ? sibling.type.displayName === \"AutoCompleteGroup\" : false\n      });\n    }\n\n    return child;\n  });\n};\n\nvar _excluded$5 = [\"children\"];\nvar AutoCompleteList = /*#__PURE__*/forwardRef(function (props, forwardedRef) {\n  var children = props.children,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$5);\n\n  var _useAutoCompleteConte = useAutoCompleteContext(),\n      listRef = _useAutoCompleteConte.listRef,\n      getListProps = _useAutoCompleteConte.getListProps;\n\n  var ref = useMergeRefs(forwardedRef, listRef);\n  var listProps = getListProps();\n  return React.createElement(PopoverContent, Object.assign({\n    ref: ref\n  }, baseStyles, listProps, rest), siblingInfo(children), React.createElement(EmptyState, null));\n});\nAutoCompleteList.displayName = \"AutoCompleteList\";\nvar baseStyles = {\n  mt: \"4\",\n  py: \"4\",\n  opacity: \"0\",\n  bg: \"#232934\",\n  rounded: \"md\",\n  maxH: \"350px\",\n  border: \"none\",\n  shadow: \"base\",\n  pos: \"absolute\",\n  zIndex: \"popover\",\n  overflowY: \"auto\",\n  _light: {\n    bg: \"#ffffff\"\n  },\n  _focus: {\n    boxShadow: \"none\"\n  }\n};\nvar _excluded$6 = [\"label\", \"onRemove\", \"disabled\"];\nvar AutoCompleteTag = /*#__PURE__*/memo(function (props) {\n  var label = props.label,\n      onRemove = props.onRemove,\n      disabled = props.disabled,\n      rest = _objectWithoutPropertiesLoose(props, _excluded$6);\n\n  return React.createElement(WrapItem$1, null, React.createElement(Tag, Object.assign({\n    borderRadius: \"md\",\n    fontWeight: \"normal\"\n  }, disabled && disabledStyles, rest), React.createElement(TagLabel, null, label), React.createElement(TagCloseButton, Object.assign({\n    onClick: function onClick() {\n      return !disabled && runIfFn(onRemove);\n    },\n    cursor: \"pointer\"\n  }, disabled && disabledStyles))));\n});\nvar disabledStyles = {\n  cursor: \"text\",\n  userSelect: \"none\",\n  opacity: 0.4,\n  _focus: {\n    boxShadow: \"none\"\n  }\n};\nexport { AutoComplete, AutoCompleteCreatable, AutoCompleteGroup, AutoCompleteGroupTitle, AutoCompleteInput, AutoCompleteItem, AutoCompleteList, AutoCompleteProvider, AutoCompleteTag, baseItemStyles, useAutoComplete, useAutoCompleteContext };","map":{"version":3,"mappings":"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","names":["createContext","name","errorMessage","AutoCompleteProvider","useAutoCompleteContext","fuzzyScore","str1","str2","gramSize","getNGrams","s","len","repeat","toLowerCase","v","Array","length","i","slice","s1","s2","pairs1","pairs2","set","Set","total","hits","item","getDefItemValue","Object","keys","toString","setEmphasis","children","query","isEmpty","newChildren","replace","RegExp","escapeRegex","match","getItemList","itemChildren","getChildrenDeep","child","type","displayName","map","itemObj","pick","props","getValue","value","finObj","isDefined","label","originalValue","getFocusedStyles","bg","_light","defaultFilterMethod","itemValue","itemLabel","indexOf","string","getMultipleWrapStyles","themeInput","multiple","field","_focusWithin","_focus","pos","minH","py","spacing","cursor","h","hasFirstItem","firstItem","result","getChildDeep","hasLastItem","lastItem","hasChildren","filteredList","findIndex","_child$props","useAutoComplete","autoCompleteProps","closeOnBlur","closeOnSelect","creatable","emphasize","emptyState","freeSolo","isReadOnly","listAllValuesOnFocus","maxSuggestions","defaultValue","defaultValues","onReady","defaultIsOpen","restoreOnBlurIfEmpty","shouldRenderSuggestions","submitKeys","suggestWhenEmpty","values","valuesProp","undefined","useDisclosure","isOpen","onClose","onOpen","runIfFn","itemList","inputRef","useRef","inputWrapperRef","listRef","interactionRef","useState","listAll","setListAll","defaultQuery","isUndefined","setQuery","filteredResults","filter","fixed","index","creatableArr","noFilter","useControllableState","onChange","newValues","find","opt","items","val","setValues","_itemList$","focusedValue","setFocusedValue","maxSelections","focusedIndex","nextItem","getNextItem","rollNavigation","prevItem","getPrevItem","getFirstItem","getLastItem","useUpdateEffect","useEffect","_itemList$2","focusedItem","onOptionFocus","focusMethod","current","isNewInput","selectItem","optionValue","includes","option","focus","focusInputOnSelect","onSelectOption","selectMethod","onCreateOption","omit","optionLabel","removeItem","focusInput","onTagRemoved","prevValues","resetItems","tags","tag","onRemove","getInputProps","onBlur","onFocus","onKeyDown","variant","rest","wrapper","ref","onClick","input","e","openOnFocus","selectOnFocus","target","select","listIsFocused","relatedTarget","inputWrapperIsFocused","_inputWrapperRef$curr","contains","latestValue","latestValueItem","latestValueLabel","newValue","queryIsEmpty","key","disabled","preventDefault","console","log","callAll","wrapperDim","useDimensions","inputDim","getListProps","width","marginBox","getItemProps","_fixed","itemChild","valueProp","onMouseOver","sx","_getValue","isFocused","isValidSuggestion","dangerouslySetInnerHTML","__html","_disabled","opacity","userSelect","mark","color","isObject","fontWeight","root","getGroupProps","hasItems","divider","hasFirstChild","hasLastChild","group","display","getEmptyStateProps","noSuggestions","every","defaultEmptyState","AutoComplete","forwardRef","context","useImperativeHandle","React","Popover","isLazy","autoFocus","placement","chakra","div","position","w","AutoCompleteItem","forwardedRef","itemRef","useMergeRefs","itemProps","scrollIntoView","behavior","block","warn","error","restProps","Flex","baseItemStyles","mx","px","rounded","AutoCompleteCreatable","childrenProp","queryValue","queryExistsInList","some","showCreatable","AutoCompleteGroup","dividerStyles","useDividerStyles","Box","Divider","top","bottom","AutoCompleteGroupTitle","baseTitleStyles","ml","my","fontSize","letterSpacing","textTransform","hasGroupSibling","groupSibling","baseStyles","borderColor","dividerColor","mb","showDivider","AutoCompleteInput","useMultiStyleConfig","inputProps","wrapperRef","wrapperProps","simpleInput","Input","multipleInput","Wrap","WrapItem","as","id","EmptyState","emptyStyles","align","justify","fontStyle","siblingInfo","Children","sibling","toArray","cloneElement","AutoCompleteList","listProps","PopoverContent","mt","maxH","border","shadow","zIndex","overflowY","boxShadow","AutoCompleteTag","memo","Tag","borderRadius","disabledStyles","TagLabel","TagCloseButton"],"sources":["/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/autocomplete-context.ts","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/helpers/fuzzySearch.ts","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/helpers/items.ts","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/helpers/input.ts","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/helpers/group.ts","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/use-autocomplete.ts","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/autocomplete.tsx","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/autocomplete-item.tsx","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/autocomplete-creatable.tsx","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/autocomplete-group.tsx","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/autocomplete-input.tsx","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/components/empty-state.tsx","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/helpers/list.ts","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/autocomplete-list.tsx","/Users/brandi/wiciweather/node_modules/@choc-ui/chakra-autocomplete/src/autocomplete-tag.tsx"],"sourcesContent":["import { createContext } from \"@chakra-ui/react-utils\";\nimport { UseAutoCompleteReturn } from \"./types\";\n\nexport const [AutoCompleteProvider, useAutoCompleteContext] = createContext<\n  UseAutoCompleteReturn\n>({\n  name: \"AutoCompleteContext\",\n  errorMessage:\n    \"useAutoCompleteContext: `context` is undefined. Seems you forgot to wrap all autoomplete components within `<AutoComplete />`\",\n});\n","/*\n * @param str1 The first string to compare.\n * @param str2 The second string to compare.\n * @param gramSize The size of the grams. Defaults to length 2.\n */\nexport function fuzzyScore(str1: string, str2: string, gramSize: number = 2) {\n  function getNGrams(s: string, len: number) {\n    s = \" \".repeat(len - 1) + s.toLowerCase() + \" \".repeat(len - 1);\n    let v = new Array(s.length - len + 1);\n    for (let i = 0; i < v.length; i++) {\n      v[i] = s.slice(i, i + len);\n    }\n    return v;\n  }\n\n  if (!str1?.length || !str2?.length) {\n    return 0.0;\n  }\n\n  //Order the strings by length so the order they're passed in doesn't matter\n  //and so the smaller string's ngrams are always the ones in the set\n  let s1 = str1.length < str2.length ? str1 : str2;\n  let s2 = str1.length < str2.length ? str2 : str1;\n\n  let pairs1 = getNGrams(s1, gramSize);\n  let pairs2 = getNGrams(s2, gramSize);\n  let set = new Set<string>(pairs1);\n\n  let total = pairs2.length;\n  let hits = 0;\n  for (let item of pairs2) {\n    if (set.delete(item)) {\n      hits++;\n    }\n  }\n  return hits / total;\n}\n","import { getChildrenDeep } from \"react-nanny\";\nimport { pick, isDefined, isEmpty } from \"@chakra-ui/utils\";\nimport { ReactNode } from \"react\";\nimport { FlexProps } from \"@chakra-ui/react\";\nimport { fuzzyScore } from \"./fuzzySearch\";\nimport { Item } from \"../types\";\nimport { AutoCompleteItemProps } from \"../autocomplete-item\";\n\nexport const getDefItemValue = (item: AutoCompleteItemProps[\"value\"]) =>\n  (typeof item === \"string\" ? item : item[Object.keys(item)[0]]).toString();\n\nexport const setEmphasis = (children: any, query: string) => {\n  if (typeof children !== \"string\" || isEmpty(query)) {\n    return children;\n  }\n  const newChildren = children\n    .toString()\n    .replace(\n      new RegExp(escapeRegex(query), \"gi\"),\n      (match: any) => `<mark>${match}</mark>`\n    );\n  return newChildren;\n};\n\nexport const getItemList = (children: ReactNode): Item[] => {\n  const itemChildren = getChildrenDeep(\n    children,\n    (child: any) => child?.type?.displayName === \"AutoCompleteItem\"\n  );\n\n  return itemChildren.map(item => {\n    const itemObj = pick(item.props, [\"value\", \"label\", \"fixed\", \"disabled\"]);\n    const { getValue = getDefItemValue } = item.props;\n    const value = getValue(itemObj.value);\n    const finObj = isDefined(itemObj.label)\n      ? itemObj\n      : { ...itemObj, label: value };\n    return { ...finObj, value, originalValue: itemObj.value };\n  });\n};\n\nexport const getFocusedStyles = (): FlexProps => {\n  return {\n    bg: \"whiteAlpha.100\",\n    _light: {\n      bg: \"gray.200\",\n    },\n  };\n};\n\nexport const defaultFilterMethod = (\n  query: string,\n  itemValue: Item[\"value\"],\n  itemLabel: Item[\"label\"]\n) => {\n  return (\n    itemValue?.toLowerCase().indexOf(query?.toLowerCase()) >= 0 ||\n    itemLabel?.toLowerCase().indexOf(query?.toLowerCase()) >= 0 ||\n    fuzzyScore(query, itemValue) >= 0.5 ||\n    fuzzyScore(query, itemLabel) >= 0.5\n  );\n};\n\nfunction escapeRegex(string: string) {\n  return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n}\n","export const getMultipleWrapStyles = (themeInput: any, multiple?: boolean) => ({\n  ...(multiple && {\n    ...themeInput.field,\n    _focusWithin: themeInput.field._focus,\n    pos: \"relative\",\n    minH: 9,\n    // px: 3,\n    py: 1.5,\n    spacing: 3,\n  }),\n  cursor: \"text\",\n  h: \"fit-content\",\n  // w: \"full\",\n});\n","import { isDefined } from \"@chakra-ui/utils\";\nimport { getChildDeep } from \"react-nanny\";\nimport { ReactNode } from \"react\";\n\nexport const hasFirstItem = (children: ReactNode, firstItem: any) => {\n  const result = getChildDeep(\n    children,\n    (child: any) =>\n      child?.type?.displayName === \"AutoCompleteItem\" &&\n      child.props.value === firstItem?.value\n  );\n\n  return result;\n};\nexport const hasLastItem = (children: ReactNode, lastItem: any) => {\n  const result = getChildDeep(\n    children,\n    (child: any) =>\n      child?.type?.displayName === \"AutoCompleteItem\" &&\n      child.props.value === lastItem?.value\n  );\n  return result;\n};\n\nexport const hasChildren = (children: any, filteredList: any[]) => {\n  return isDefined(\n    getChildDeep(\n      children,\n      (child: any) =>\n        filteredList.findIndex(i => i.value === child.props?.value) >= 0\n    )\n  );\n};\n","import {\n  useDimensions,\n  useDisclosure,\n  useUpdateEffect,\n  useControllableState,\n} from \"@chakra-ui/react\";\nimport {\n  callAll,\n  getFirstItem,\n  getLastItem,\n  getNextItem,\n  getPrevItem,\n  isObject,\n  isEmpty,\n  isUndefined,\n  runIfFn,\n} from \"@chakra-ui/utils\";\nimport { omit } from \"@chakra-ui/utils\";\n\nimport { useEffect, useRef, useState } from \"react\";\n\nimport { AutoCompleteProps } from \"./autocomplete\";\nimport {\n  defaultFilterMethod,\n  getDefItemValue,\n  getFocusedStyles,\n  getItemList,\n  setEmphasis,\n} from \"./helpers/items\";\nimport { getMultipleWrapStyles } from \"./helpers/input\";\nimport { hasChildren, hasFirstItem, hasLastItem } from \"./helpers/group\";\nimport { Item, UseAutoCompleteReturn } from \"./types\";\n\n/**\n * useAutoComplete that provides all the state and focus management logic\n * for the autocomplete component. It is consumed by the `Autocomplete` component\n *\n */\n\nexport function useAutoComplete(\n  autoCompleteProps: AutoCompleteProps\n): UseAutoCompleteReturn {\n  let {\n    closeOnBlur = true,\n    closeOnSelect,\n    creatable,\n    emphasize,\n    emptyState = true,\n    freeSolo,\n    isReadOnly,\n    listAllValuesOnFocus,\n    maxSuggestions,\n    multiple,\n    defaultValue,\n    defaultValues = defaultValue ? [defaultValue] : [],\n    onReady,\n    defaultIsOpen,\n    restoreOnBlurIfEmpty = !freeSolo,\n    shouldRenderSuggestions = () => true,\n    submitKeys = [],\n    suggestWhenEmpty,\n    value,\n    values: valuesProp = value\n      ? typeof value === \"string\"\n        ? [value]\n        : [...value]\n      : undefined,\n  } = autoCompleteProps;\n  closeOnSelect = closeOnSelect ? closeOnSelect : multiple ? false : true;\n\n  freeSolo = freeSolo ? freeSolo : multiple ? true : autoCompleteProps.freeSolo;\n\n  const { isOpen, onClose, onOpen } = useDisclosure({ defaultIsOpen });\n\n  const children = runIfFn(autoCompleteProps.children, {\n    isOpen,\n    onClose,\n    onOpen,\n  });\n  const itemList: Item[] = getItemList(children);\n\n  const inputRef = useRef<HTMLInputElement>(null);\n  const inputWrapperRef = useRef<HTMLDivElement>(null);\n  const listRef = useRef<HTMLDivElement>(null);\n  const interactionRef = useRef<\"mouse\" | \"keyboard\" | null>(null);\n\n  const [listAll, setListAll] = useState(false);\n\n  let defaultQuery = \"\";\n  if (multiple) defaultQuery = \"\";\n  else if (!isUndefined(defaultValues)) defaultQuery = defaultValues[0];\n  else if (!isUndefined(valuesProp)) defaultQuery = valuesProp[0];\n\n  const [query, setQuery] = useState<string>(defaultQuery ?? \"\");\n  const filteredResults = itemList\n    .filter(\n      i =>\n        i.fixed ||\n        runIfFn(\n          autoCompleteProps.filter || defaultFilterMethod,\n          query,\n          i.value,\n          i.label\n        ) ||\n        listAll\n    )\n    .filter((i, index) => (maxSuggestions ? i.fixed || index < maxSuggestions : true));\n\n  // Add Creatable to Filtered List\n  const creatableArr: Item[] = creatable\n    ? [{ value: query, noFilter: true, creatable: true }]\n    : [];\n\n  const filteredList = [...filteredResults, ...creatableArr];\n  const [values, setValues] = useControllableState({\n    defaultValue: defaultValues,\n    value: valuesProp,\n    onChange: (newValues: any[]) => {\n      const item = filteredList.find(opt => opt.value === newValues[0]);\n      const items = newValues.map(val =>\n        filteredList.find(opt => opt.value === val)\n      );\n      runIfFn(\n        autoCompleteProps.onChange,\n        multiple ? newValues : newValues[0],\n        multiple ? items : item\n      );\n    },\n  });\n\n  const [focusedValue, setFocusedValue] = useState<Item[\"value\"]>(\n    itemList[0]?.value\n  );\n\n  const maxSelections = autoCompleteProps.maxSelections || values.length + 1;\n\n  const focusedIndex = filteredList.findIndex(i => i.value === focusedValue);\n  const nextItem = getNextItem(\n    focusedIndex,\n    filteredList,\n    !!autoCompleteProps.rollNavigation\n  );\n  const prevItem = getPrevItem(\n    focusedIndex,\n    filteredList,\n    !!autoCompleteProps.rollNavigation\n  );\n  const firstItem = getFirstItem(filteredList);\n  const lastItem = getLastItem(filteredList);\n\n  useUpdateEffect(() => {\n    setFocusedValue(firstItem?.value);\n  }, [query]);\n\n  useEffect(() => {\n    if (!isOpen) setFocusedValue(itemList[0]?.value);\n  }, [isOpen]);\n\n  useEffect(() => {\n    const focusedItem = itemList.find(i => i.value === focusedValue);\n    runIfFn(autoCompleteProps.onOptionFocus, {\n      item: focusedItem!,\n      focusMethod: interactionRef.current,\n      isNewInput: focusedItem?.creatable,\n    });\n  }, [focusedValue, autoCompleteProps.onOptionFocus]);\n\n  const selectItem = (optionValue: Item[\"value\"]) => {\n    if (!values.includes(optionValue) && values.length < maxSelections) {\n      setValues(v => (multiple ? [...v, optionValue] : [optionValue]));\n    }\n\n    const option = filteredList.find(i => i.value === optionValue);\n\n    if (multiple) {\n      inputRef.current?.focus();\n    }\n    if (autoCompleteProps.focusInputOnSelect) inputRef.current?.focus();\n    runIfFn(autoCompleteProps.onSelectOption, {\n      item: option!,\n      selectMethod: interactionRef.current,\n      isNewInput: option?.creatable,\n    });\n    if (option?.creatable) {\n      runIfFn(autoCompleteProps.onCreateOption, {\n        item: omit(option!, [\"noFilter\"]),\n        selectMethod: interactionRef.current,\n      });\n    }\n\n    const optionLabel = option?.label || option?.value;\n    setQuery(() => (multiple ? \"\" : optionLabel ?? \"\"));\n\n    if (closeOnSelect) onClose();\n  };\n\n  const removeItem: UseAutoCompleteReturn[\"removeItem\"] = (\n    itemValue,\n    focusInput\n  ) => {\n    setValues(prevValues => {\n      const item = itemList.find(opt => opt.value === itemValue);\n      runIfFn(autoCompleteProps.onTagRemoved, itemValue, item, prevValues);\n      return prevValues.filter(i => i !== itemValue);\n    });\n    if (query === itemValue) setQuery(\"\");\n    if (focusInput) inputRef.current?.focus();\n  };\n\n  const resetItems = (focusInput?: boolean) => {\n    setValues([]);\n    if (focusInput) inputRef.current?.focus();\n  };\n\n  const tags = multiple\n    ? values.map(tag => ({\n        label: itemList.find(item => item.value === tag)?.label || tag,\n        onRemove: () => removeItem(tag),\n      }))\n    : [];\n\n  useEffect(() => {\n    runIfFn(onReady, { tags });\n  }, [values]);\n\n  const getInputProps: UseAutoCompleteReturn[\"getInputProps\"] = (\n    props,\n    themeInput\n  ) => {\n    const { onBlur, onChange, onFocus, onKeyDown, variant, ...rest } = props;\n\n    return {\n      wrapper: {\n        ref: inputWrapperRef,\n        onClick: () => {\n          inputRef?.current?.focus();\n        },\n        ...getMultipleWrapStyles(themeInput, multiple),\n        ...rest,\n      },\n      input: {\n        isReadOnly,\n        onFocus: e => {\n          runIfFn(onFocus, e);\n          if (autoCompleteProps.openOnFocus && !isReadOnly) onOpen();\n          if (autoCompleteProps.selectOnFocus) e.target.select();\n          if (listAllValuesOnFocus) setListAll(true);\n        },\n        onBlur: e => {\n          runIfFn(onBlur, e);\n          const listIsFocused = e.relatedTarget === listRef?.current;\n          const inputWrapperIsFocused = inputWrapperRef.current?.contains(\n            e.relatedTarget as any\n          );\n          if (!listIsFocused && !inputWrapperIsFocused) {\n            if (closeOnBlur) onClose();\n            if (!values.includes(e.target.value) && restoreOnBlurIfEmpty) {\n              const latestValue = getLastItem(values);\n              const latestValueItem = itemList.find(\n                i => i.value === latestValue\n              );\n              const latestValueLabel =\n                latestValueItem?.label || latestValueItem?.value || \"\";\n              setQuery(latestValueLabel);\n            }\n          }\n        },\n        onChange: e => {\n          const newValue = e.target.value;\n          runIfFn(onChange, e);\n          setQuery(newValue);\n          const queryIsEmpty = isEmpty(newValue);\n          if (\n            runIfFn(shouldRenderSuggestions, newValue) &&\n            (!queryIsEmpty || suggestWhenEmpty)\n          )\n            onOpen();\n          else onClose();\n          setListAll(false);\n        },\n        onKeyDown: e => {\n          runIfFn(onKeyDown, e);\n          interactionRef.current = \"keyboard\";\n\n          const { key } = e;\n          const focusedItem = filteredList[focusedIndex];\n          if ([\"Enter\", ...submitKeys].includes(key)) {\n            if (focusedItem && !focusedItem?.disabled)\n              selectItem(focusedItem?.value);\n            else inputRef.current?.focus();\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"ArrowDown\") {\n            setFocusedValue(nextItem?.value);\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"ArrowUp\") {\n            setFocusedValue(prevItem?.value);\n\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"Tab\") {\n            setFocusedValue(nextItem?.value);\n\n            if (isOpen) {\n              if (focusedItem.value === lastItem?.value) {\n                console.log(\"last\");\n              }\n              e.preventDefault();\n            }\n\n            return;\n          }\n\n          if (key === \"Home\") {\n            setFocusedValue(firstItem?.value);\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"End\") {\n            setFocusedValue(lastItem?.value);\n            e.preventDefault();\n            return;\n          }\n\n          if (key === \"Escape\") {\n            callAll(onClose, e.preventDefault);\n          }\n        },\n        value: query,\n        variant: multiple ? \"unstyled\" : variant,\n        ...rest,\n      },\n    };\n  };\n\n  const wrapperDim = useDimensions(inputWrapperRef, true);\n  const inputDim = useDimensions(inputRef, true);\n  const getListProps: UseAutoCompleteReturn[\"getListProps\"] = () => {\n    const width = autoCompleteProps.multiple\n      ? (wrapperDim?.marginBox.width as number)\n      : (inputDim?.marginBox.width as number);\n    return {\n      width,\n    };\n  };\n\n  const getItemProps: UseAutoCompleteReturn[\"getItemProps\"] = (\n    props,\n    creatable\n  ) => {\n    const {\n      _fixed,\n      _focus,\n      children: itemChild,\n      disabled,\n      label,\n      value: valueProp,\n      fixed,\n      getValue = getDefItemValue,\n      onClick,\n      onMouseOver,\n      sx,\n      ...rest\n    } = props;\n    const value = creatable ? valueProp : getValue(valueProp)?.toString();\n    const isFocused = value === focusedValue;\n    const isValidSuggestion =\n      filteredList.findIndex(i => i.value === value) >= 0;\n    const itemLabel = itemChild || label || value;\n    return {\n      item: {\n        ...(typeof itemLabel !== \"string\" || !emphasize\n          ? { children: itemLabel }\n          : {\n              dangerouslySetInnerHTML: {\n                __html: setEmphasis(itemLabel, query),\n              },\n            }),\n        \"aria-selected\": values.includes(value),\n        \"aria-disabled\": disabled,\n        _disabled: { opacity: 0.4, cursor: \"not-allowed\", userSelect: \"none\" },\n        onClick: e => {\n          runIfFn(onClick, e);\n          if (!disabled) selectItem(value);\n          else inputRef.current?.focus();\n        },\n        onMouseOver: e => {\n          runIfFn(onMouseOver, e);\n          setFocusedValue(value);\n          interactionRef.current = \"mouse\";\n        },\n        sx: {\n          ...sx,\n          mark: {\n            color: \"inherit\",\n            bg: \"transparent\",\n            ...(isObject(emphasize)\n              ? emphasize\n              : {\n                  fontWeight: emphasize ? \"extrabold\" : \"inherit\",\n                }),\n          },\n        },\n        ...(isFocused && (_focus || getFocusedStyles())),\n        ...(fixed && _fixed),\n        ...rest,\n      },\n      root: {\n        isValidSuggestion,\n        value,\n      },\n    };\n  };\n\n  const getGroupProps: UseAutoCompleteReturn[\"getGroupProps\"] = props => {\n    const hasItems = hasChildren(props.children, filteredList);\n    return {\n      divider: {\n        hasFirstChild: hasFirstItem(props.children, firstItem),\n        hasLastChild: hasLastItem(\n          props.children,\n          getLastItem(filteredList.filter(i => isUndefined(i?.noFilter)))\n        ),\n      },\n      group: {\n        display: hasItems ? \"initial\" : \"none\",\n      },\n    };\n  };\n\n  const getEmptyStateProps: UseAutoCompleteReturn[\"getEmptyStateProps\"] = defaultEmptyState => {\n    const noSuggestions = filteredList.every(i => i.noFilter);\n    if (noSuggestions && emptyState && !creatable) {\n      return typeof emptyState === \"boolean\"\n        ? defaultEmptyState\n        : runIfFn(emptyState, { query });\n    }\n  };\n\n  return {\n    autoCompleteProps,\n    children,\n    filteredList,\n    filteredResults,\n    focusedValue,\n    getEmptyStateProps,\n    getGroupProps,\n    getInputProps,\n    getItemProps,\n    getListProps,\n    inputRef,\n    interactionRef,\n    isOpen,\n    itemList,\n    listRef,\n    onClose,\n    onOpen,\n    query,\n    removeItem,\n    resetItems,\n    setQuery,\n    tags,\n    values,\n  };\n}\n","import React, { useImperativeHandle } from \"react\";\nimport { MaybeRenderProp } from \"@chakra-ui/react-utils\";\n\nimport { AutoCompleteProvider } from \"./autocomplete-context\";\nimport { useAutoComplete } from \"./use-autocomplete\";\nimport { chakra, forwardRef, Popover } from \"@chakra-ui/react\";\nimport { AutoCompleteRefMethods, UseAutoCompleteProps } from \"./types\";\n\nexport type AutoCompleteChildProps = {\n  isOpen: boolean;\n  onClose: () => void;\n  onOpen: () => void;\n};\nexport interface AutoCompleteProps extends UseAutoCompleteProps {\n  children: MaybeRenderProp<AutoCompleteChildProps>;\n  ref?: React.RefObject<AutoCompleteRefMethods>;\n}\n\nexport const AutoComplete = forwardRef<AutoCompleteProps, \"div\">(\n  (props, ref) => {\n    const context = useAutoComplete(props);\n    const {\n      children,\n      isOpen,\n      onClose,\n      onOpen,\n      resetItems,\n      removeItem,\n    } = context;\n\n    useImperativeHandle(ref, () => ({\n      resetItems,\n      removeItem,\n    }));\n\n    return (\n      <AutoCompleteProvider value={context}>\n        <Popover\n          isLazy\n          isOpen={isOpen}\n          onClose={onClose}\n          onOpen={onOpen}\n          autoFocus={false}\n          placement=\"bottom\"\n          closeOnBlur={true}\n        >\n          <chakra.div\n            sx={{\n              \".chakra-popover__popper\": {\n                position: \"unset !important\",\n              },\n            }}\n            w=\"full\"\n            ref={ref}\n          >\n            {children}\n          </chakra.div>\n        </Popover>\n      </AutoCompleteProvider>\n    );\n  }\n);\n\nAutoComplete.displayName = \"AutoComplete\";\n","import {\n  CSSObject,\n  Flex,\n  FlexProps,\n  forwardRef,\n  useMergeRefs,\n} from \"@chakra-ui/react\";\nimport { isUndefined, omit } from \"@chakra-ui/utils\";\nimport React, { useEffect, useRef } from \"react\";\n\nimport { useAutoCompleteContext } from \"./autocomplete-context\";\n\nexport interface AutoCompleteItemProps extends FlexProps {\n  value: any;\n  label?: string;\n  fixed?: boolean;\n  _focus?: CSSObject | any;\n  disabled?: boolean;\n  _fixed?: CSSObject;\n  getValue?: (item: AutoCompleteItemProps[\"value\"]) => any;\n}\n\nexport const AutoCompleteItem = forwardRef<AutoCompleteItemProps, \"div\">(\n  (props, forwardedRef) => {\n    const {\n      focusedValue,\n      getItemProps,\n      interactionRef,\n    } = useAutoCompleteContext();\n    const itemRef = useRef<any>();\n    const ref = useMergeRefs(forwardedRef, itemRef);\n\n    const itemProps = getItemProps(props);\n    const { isValidSuggestion, value } = itemProps.root;\n\n    const isFocused = focusedValue === value;\n\n    useEffect(() => {\n      if (isFocused && interactionRef.current === \"keyboard\")\n        itemRef?.current?.scrollIntoView({\n          behavior: \"smooth\",\n          block: \"center\",\n        });\n    }, [isFocused, interactionRef]);\n\n    useEffect(() => {\n      if (typeof value !== \"string\") console.warn(\"wow\");\n      if (typeof value !== \"string\" && isUndefined(props.getValue))\n        console.error(\n          \"You must define the `getValue` prop, when an Item's value is not a string\"\n        );\n    }, []);\n\n    const { children, dangerouslySetInnerHTML, ...restProps } = itemProps.item;\n\n    const rest = omit(restProps, [\"groupId\"] as any);\n\n    return isValidSuggestion ? (\n      <Flex ref={ref} {...baseItemStyles} {...rest}>\n        {children ? (\n          children\n        ) : (\n          <span dangerouslySetInnerHTML={dangerouslySetInnerHTML} />\n        )}\n      </Flex>\n    ) : null;\n  }\n);\n\nAutoCompleteItem.displayName = \"AutoCompleteItem\";\n\nexport const baseItemStyles: FlexProps = {\n  mx: \"2\",\n  px: \"2\",\n  py: \"2\",\n  rounded: \"md\",\n  cursor: \"pointer\",\n};\n","import { Flex, FlexProps } from \"@chakra-ui/react\";\nimport { MaybeRenderProp } from \"@chakra-ui/react-utils\";\nimport { isEmpty, runIfFn } from \"@chakra-ui/utils\";\n\nimport React from \"react\";\n\nimport { useAutoCompleteContext } from \"./autocomplete-context\";\nimport { baseItemStyles } from \"./autocomplete-item\";\n\ninterface AutoCompleteCreatableProps extends FlexProps {\n  children?: MaybeRenderProp<{ value: any }>;\n}\n\nexport function AutoCompleteCreatable(props: AutoCompleteCreatableProps) {\n  const { children: childrenProp, ...rest } = props;\n  const {\n    autoCompleteProps,\n    getItemProps,\n    query,\n    filteredResults,\n  } = useAutoCompleteContext();\n\n  const queryValue = <mark>{query}</mark>;\n  const { children, ...itemProps } = getItemProps(\n    {\n      ...props,\n      value: query,\n      children: runIfFn(childrenProp, {\n        value: queryValue,\n      }),\n    },\n    true\n  ).item;\n\n  const queryExistsInList = filteredResults.some(i => i.value === query);\n  const showCreatable =\n    autoCompleteProps.creatable && !isEmpty(query) && !queryExistsInList;\n\n  return showCreatable ? (\n    <Flex {...baseItemStyles} {...itemProps} {...rest}>\n      {children || `Add ${query}`}\n    </Flex>\n  ) : null;\n}\n\nAutoCompleteCreatable.displayName = \"AutoCompleteCreatable\";\n","import {\n  Box,\n  BoxProps,\n  Divider,\n  DividerProps,\n  Flex,\n  FlexProps,\n  forwardRef,\n} from \"@chakra-ui/react\";\nimport { omit } from \"@chakra-ui/utils\";\nimport React from \"react\";\nimport { useAutoCompleteContext } from \"./autocomplete-context\";\n\nexport interface AutoCompleteGroupProps extends BoxProps {\n  children?: React.ReactNode;\n  showDivider?: boolean;\n  dividerColor?: string;\n}\n\nexport const AutoCompleteGroup = forwardRef<AutoCompleteGroupProps, \"div\">(\n  (props, ref) => {\n    const { children, showDivider, ...restProps } = props;\n    const rest = omit(restProps, [\"groupSibling\"] as any);\n\n    const { getGroupProps } = useAutoCompleteContext();\n\n    const { group } = getGroupProps(props);\n\n    const dividerStyles = useDividerStyles(props);\n\n    return (\n      <Box ref={ref} {...group} {...rest}>\n        <Divider {...dividerStyles.top} />\n        {children}\n        <Divider {...dividerStyles.bottom} />\n      </Box>\n    );\n  }\n);\n\nexport const AutoCompleteGroupTitle = forwardRef<FlexProps, \"div\">(\n  (props, ref) => {\n    return <Flex {...baseTitleStyles} {...props} ref={ref} />;\n  }\n);\n\nAutoCompleteGroup.displayName = \"AutoCompleteGroup\";\nAutoCompleteGroupTitle.displayName = \"AutoCompleteGroupTitle\";\n\nconst baseTitleStyles: FlexProps = {\n  ml: 5,\n  my: 1,\n  fontSize: \"xs\",\n  letterSpacing: \"wider\",\n  fontWeight: \"extrabold\",\n  textTransform: \"uppercase\",\n};\n\nconst useDividerStyles = (\n  props: AutoCompleteGroupProps & { groupSibling?: boolean }\n) => {\n  const { getGroupProps } = useAutoCompleteContext();\n\n  const hasGroupSibling: unknown = props.groupSibling;\n\n  const {\n    divider: { hasFirstChild, hasLastChild },\n  } = getGroupProps(props as AutoCompleteGroupProps);\n\n  const baseStyles: DividerProps = {\n    my: 2,\n    borderColor: props.dividerColor,\n  };\n\n  const top = {\n    ...baseStyles,\n    mb: 4,\n    display: !props.showDivider || hasFirstChild ? \"none\" : \"\",\n  };\n  const bottom = {\n    ...baseStyles,\n    display:\n      !props.showDivider || hasLastChild || hasGroupSibling ? \"none\" : \"\",\n  };\n\n  return { top, bottom };\n};\n","import {\n  CSSObject,\n  forwardRef,\n  Input,\n  InputProps,\n  useMergeRefs,\n  useMultiStyleConfig,\n  Wrap,\n  WrapItem,\n} from \"@chakra-ui/react\";\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport { MaybeRenderProp } from \"@chakra-ui/react-utils\";\nimport React from \"react\";\n\nimport { useAutoCompleteContext } from \"./autocomplete-context\";\nimport { UseAutoCompleteReturn } from \"./types\";\n\nexport interface AutoCompleteInputProps extends InputProps {\n  children?: MaybeRenderProp<{ tags: UseAutoCompleteReturn[\"tags\"] }>;\n  wrapStyles?: CSSObject;\n}\n\nexport const AutoCompleteInput = forwardRef<AutoCompleteInputProps, \"input\">(\n  (props, forwardedRef) => {\n    const {\n      autoCompleteProps,\n      inputRef,\n      getInputProps,\n      tags,\n    } = useAutoCompleteContext();\n\n    // const ref = useMergeRefs(forwardedRef, inputRef);\n\n    const { children: childrenProp, ...rest } = props;\n\n    const themeInput: any = useMultiStyleConfig(\"Input\", props);\n\n    const { wrapper, input: inputProps } = getInputProps(rest, themeInput);\n    const { ref: wrapperRef, ...wrapperProps } = wrapper;\n    const ref = useMergeRefs(forwardedRef, inputRef);\n\n    const children = runIfFn(childrenProp, { tags });\n\n    const simpleInput = <Input {...(inputProps as any)} ref={ref} />;\n\n    const multipleInput = (\n      <Wrap {...wrapperProps} ref={wrapperRef}>\n        {children}\n        <WrapItem as={Input} {...(inputProps as any)} ref={ref} />\n      </Wrap>\n    );\n\n    return <>{autoCompleteProps.multiple ? multipleInput : simpleInput}</>;\n  }\n);\n\nAutoCompleteInput.displayName = \"Input\";\n\nAutoCompleteInput.id = \"Input\";\n","import { Box, BoxProps, Flex, FlexProps } from \"@chakra-ui/layout\";\nimport React from \"react\";\nimport { useAutoCompleteContext } from \"../autocomplete-context\";\n\nexport const EmptyState = (props: BoxProps) => {\n  const { getEmptyStateProps } = useAutoCompleteContext();\n\n  const emptyState = getEmptyStateProps(\n    <Flex {...emptyStyles}>No options found!</Flex>\n  );\n\n  return <Box {...props}>{emptyState}</Box>;\n};\n\nconst emptyStyles: FlexProps = {\n  fontSize: \"sm\",\n  align: \"center\",\n  justify: \"center\",\n  fontWeight: \"bold\",\n  fontStyle: \"italic\",\n};\n","import React from \"react\";\n\nexport const siblingInfo = (children: React.ReactNode) => {\n  return React.Children.map(children, (child: any, i) => {\n    if (child.type.displayName === \"AutoCompleteGroup\") {\n      const sibling: any = React.Children.toArray(children)[i + 1];\n      return React.cloneElement(child, {\n        groupSibling: sibling\n          ? sibling.type.displayName === \"AutoCompleteGroup\"\n          : false,\n      });\n    }\n    return child;\n  });\n};\n","import {\n  forwardRef,\n  PopoverContent,\n  PopoverContentProps,\n  useMergeRefs,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { useAutoCompleteContext } from \"./autocomplete-context\";\nimport { EmptyState } from \"./components/empty-state\";\nimport { siblingInfo } from \"./helpers/list\";\n\nexport type AutoCompleteListProps = PopoverContentProps;\n\nexport const AutoCompleteList = forwardRef<AutoCompleteListProps, \"div\">(\n  (props, forwardedRef) => {\n    const { children, ...rest } = props;\n    const { listRef, getListProps } = useAutoCompleteContext();\n    const ref = useMergeRefs(forwardedRef, listRef);\n    const listProps = getListProps();\n\n    return (\n      <PopoverContent ref={ref} {...baseStyles} {...listProps} {...rest}>\n        {siblingInfo(children)}\n        <EmptyState />\n      </PopoverContent>\n    );\n  }\n);\n\nAutoCompleteList.displayName = \"AutoCompleteList\";\n\nconst baseStyles: PopoverContentProps = {\n  mt: \"4\",\n  py: \"4\",\n  opacity: \"0\",\n  bg: \"#232934\",\n  rounded: \"md\",\n  maxH: \"350px\",\n  border: \"none\",\n  shadow: \"base\",\n  pos: \"absolute\",\n  zIndex: \"popover\",\n  overflowY: \"auto\",\n\n  _light: {\n    bg: \"#ffffff\",\n  },\n\n  _focus: {\n    boxShadow: \"none\",\n  },\n};\n","import { WrapItem } from \"@chakra-ui/layout\";\nimport { Tag, TagCloseButton, TagLabel, TagProps } from \"@chakra-ui/tag\";\nimport { runIfFn } from \"@chakra-ui/utils\";\nimport React, { memo } from \"react\";\n\ntype AutoCompleteTagProps = {\n  disabled?: boolean;\n  label: string;\n  onRemove?: () => void;\n} & TagProps;\n\nexport const AutoCompleteTag = memo((props: AutoCompleteTagProps) => {\n  const { label, onRemove, disabled, ...rest } = props;\n\n  return (\n    <WrapItem>\n      <Tag\n        borderRadius=\"md\"\n        fontWeight=\"normal\"\n        {...(disabled && disabledStyles)}\n        {...rest}\n      >\n        <TagLabel>{label}</TagLabel>\n        <TagCloseButton\n          onClick={() => !disabled && runIfFn(onRemove)}\n          cursor=\"pointer\"\n          {...(disabled && disabledStyles)}\n        />\n      </Tag>\n    </WrapItem>\n  );\n});\n\nconst disabledStyles: TagProps = {\n  cursor: \"text\",\n  userSelect: \"none\",\n  opacity: 0.4,\n  _focus: { boxShadow: \"none\" },\n};\n"]},"metadata":{},"sourceType":"module"}