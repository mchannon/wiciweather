{"ast":null,"code":"var _jsxFileName = \"/Users/brandi/wiciweather/src/context/index.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useReducer } from 'react';\nimport { initialState } from '../state';\nimport { reducers } from '../state/reducers';\nimport { actions } from '../state/actions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WeatherContext = /*#__PURE__*/createContext({\n  state: initialState,\n  isCelsius: true,\n  setIsCelsius: () => {},\n  getForecast: () => {}\n});\n\nconst WeatherProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [state, dispatch] = useReducer(reducers, initialState);\n  const [isCelsius, setIsCelsius] = useState(true);\n\n  const getForecast = async function () {\n    let destination = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'auto:ip';\n\n    try {\n      const response = await fetch(`https://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_API_KEY}&q=${destination}&days=3&aqi=no&alerts=no`);\n\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      const data = await response.json();\n      const {\n        current,\n        forecast,\n        location\n      } = data;\n      dispatch({\n        type: actions.setForecast,\n        payload: {\n          current,\n          forecast: forecast.forecastday,\n          location: `${location.name}, ${location.region}`\n        }\n      });\n    } catch (error) {\n      console.log(`Error: ${error}`);\n    }\n  };\n\n  useEffect(() => {\n    getForecast();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(WeatherContext.Provider, {\n    value: {\n      getForecast,\n      isCelsius,\n      setIsCelsius,\n      state\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n\n_s(WeatherProvider, \"VochvQnHUsCxmmnaV0+eZalovzw=\");\n\n_c = WeatherProvider;\nexport default WeatherProvider;\n\nvar _c;\n\n$RefreshReg$(_c, \"WeatherProvider\");","map":{"version":3,"sources":["/Users/brandi/wiciweather/src/context/index.js"],"names":["createContext","useState","useEffect","useReducer","initialState","reducers","actions","WeatherContext","state","isCelsius","setIsCelsius","getForecast","WeatherProvider","children","dispatch","destination","response","fetch","process","env","REACT_APP_API_KEY","ok","Error","statusText","data","json","current","forecast","location","type","setForecast","payload","forecastday","name","region","error","console","log"],"mappings":";;;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAAkCC,SAAlC,EAA6CC,UAA7C,QAA+D,OAA/D;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,QAAT,QAAyB,mBAAzB;AACA,SAASC,OAAT,QAAwB,kBAAxB;;AAEA,OAAO,MAAMC,cAAc,gBAAGP,aAAa,CAAC;AAC1CQ,EAAAA,KAAK,EAAEJ,YADmC;AAE1CK,EAAAA,SAAS,EAAE,IAF+B;AAG1CC,EAAAA,YAAY,EAAE,MAAM,CAAE,CAHoB;AAI1CC,EAAAA,WAAW,EAAE,MAAM,CAAE;AAJqB,CAAD,CAApC;;AAOP,MAAMC,eAAe,GAAG,QAAkB;AAAA;;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACxC,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBX,UAAU,CAACE,QAAD,EAAWD,YAAX,CAApC;AACA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BT,QAAQ,CAAC,IAAD,CAA1C;;AAEA,QAAMU,WAAW,GAAG,kBAAmC;AAAA,QAA5BI,WAA4B,uEAAd,SAAc;;AACrD,QAAI;AACF,YAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,mDAAkDC,OAAO,CAACC,GAAR,CAAYC,iBAAkB,MAAKL,WAAY,0BADxE,CAA5B;;AAGA,UAAI,CAACC,QAAQ,CAACK,EAAd,EAAkB;AAChB,cAAM,IAAIC,KAAJ,CAAUN,QAAQ,CAACO,UAAnB,CAAN;AACD;;AAED,YAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAT,EAAnB;AACA,YAAM;AAAEC,QAAAA,OAAF;AAAWC,QAAAA,QAAX;AAAqBC,QAAAA;AAArB,UAAkCJ,IAAxC;AACAV,MAAAA,QAAQ,CAAC;AACPe,QAAAA,IAAI,EAAEvB,OAAO,CAACwB,WADP;AAEPC,QAAAA,OAAO,EAAE;AACPL,UAAAA,OADO;AAEPC,UAAAA,QAAQ,EAAEA,QAAQ,CAACK,WAFZ;AAGPJ,UAAAA,QAAQ,EAAG,GAAEA,QAAQ,CAACK,IAAK,KAAIL,QAAQ,CAACM,MAAO;AAHxC;AAFF,OAAD,CAAR;AAQD,KAlBD,CAkBE,OAAOC,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAa,UAASF,KAAM,EAA5B;AACD;AACF,GAtBD;;AAwBAjC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,WAAW;AACZ,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACE,QAAC,cAAD,CAAgB,QAAhB;AACE,IAAA,KAAK,EAAE;AAAEA,MAAAA,WAAF;AAAeF,MAAAA,SAAf;AAA0BC,MAAAA,YAA1B;AAAwCF,MAAAA;AAAxC,KADT;AAAA,cAGGK;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD,CAvCD;;GAAMD,e;;KAAAA,e;AAyCN,eAAeA,eAAf","sourcesContent":["import { createContext, useState, useEffect, useReducer } from 'react';\nimport { initialState } from '../state';\nimport { reducers } from '../state/reducers';\nimport { actions } from '../state/actions';\n\nexport const WeatherContext = createContext({\n  state: initialState,\n  isCelsius: true,\n  setIsCelsius: () => {},\n  getForecast: () => {},\n});\n\nconst WeatherProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducers, initialState);\n  const [isCelsius, setIsCelsius] = useState(true);\n\n  const getForecast = async (destination = 'auto:ip') => {\n    try {\n      const response = await fetch(\n        `https://api.weatherapi.com/v1/forecast.json?key=${process.env.REACT_APP_API_KEY}&q=${destination}&days=3&aqi=no&alerts=no`\n      );\n      if (!response.ok) {\n        throw new Error(response.statusText);\n      }\n\n      const data = await response.json();\n      const { current, forecast, location } = data;\n      dispatch({\n        type: actions.setForecast,\n        payload: {\n          current,\n          forecast: forecast.forecastday,\n          location: `${location.name}, ${location.region}`,\n        },\n      });\n    } catch (error) {\n      console.log(`Error: ${error}`);\n    }\n  };\n\n  useEffect(() => {\n    getForecast();\n  }, []);\n\n  return (\n    <WeatherContext.Provider\n      value={{ getForecast, isCelsius, setIsCelsius, state }}\n    >\n      {children}\n    </WeatherContext.Provider>\n  );\n};\n\nexport default WeatherProvider;\n"]},"metadata":{},"sourceType":"module"}