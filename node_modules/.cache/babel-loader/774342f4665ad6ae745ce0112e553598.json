{"ast":null,"code":"var _jsxFileName = \"/Users/brandi/wiciweather/src/components/Forecast.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { WeatherContext } from '../context';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport { Box, Flex, Heading, Spacer, Stack, StackDivider, Text } from '@chakra-ui/layout';\nimport { Image } from '@chakra-ui/image';\nimport { getDay } from '../helpers/getDay';\nimport { getShortDate } from '../helpers/getDate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Forecast = () => {\n  _s();\n\n  const {\n    isCelsius,\n    state: {\n      forecast\n    }\n  } = useContext(WeatherContext); // Light mode | Dark mode style\n\n  const bg = useColorModeValue('white', 'gray.700');\n  const color = useColorModeValue('gray.600', 'gray.400');\n  const borderColor = useColorModeValue('gray.200', 'gray.600');\n  return forecast.map((weather, index) => {\n    const date = getShortDate(weather.date);\n    const conditionIcon = weather.day.condition.icon;\n    const minTemp = weather.day[isCelsius ? 'mintemp_c' : 'mintemp_f'];\n    const avgTemp = weather.day[isCelsius ? 'avgtemp_c' : 'avgtemp_f'];\n    const maxTemp = weather.day[isCelsius ? 'maxtemp_c' : 'mintemp_f'];\n    return /*#__PURE__*/_jsxDEV(Flex, {\n      mt: 4,\n      px: 6,\n      py: 4,\n      display: \"flex\",\n      align: \"center\",\n      bg: bg,\n      shadow: \"base\",\n      borderRadius: \"2xl\",\n      transitionDuration: \".25s\",\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h3\",\n          fontSize: \"lg\",\n          fontWeight: \"medium\",\n          children: getDay(weather.date)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Text, {\n          color: color,\n          children: date\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Spacer, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Flex, {\n        lineHeight: \"shorter\",\n        textAlign: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Stack, {\n          mr: 6,\n          spacing: 0,\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            fontSize: \"2xl\",\n            children: [avgTemp, /*#__PURE__*/_jsxDEV(Text, {\n              as: \"span\",\n              children: \"\\xB0\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Stack, {\n            direction: \"row\",\n            divider: /*#__PURE__*/_jsxDEV(StackDivider, {\n              borderColor: borderColor\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 24\n            }, this),\n            children: [/*#__PURE__*/_jsxDEV(Text, {\n              color: color,\n              children: [minTemp, /*#__PURE__*/_jsxDEV(Text, {\n                as: \"span\",\n                children: \"\\xB0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 66,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 64,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Text, {\n              children: [maxTemp, /*#__PURE__*/_jsxDEV(Text, {\n                as: \"span\",\n                children: \"\\xB0\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 70,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Image, {\n          boxSize: \"50px\",\n          src: conditionIcon,\n          alt: \"weather condition\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this);\n  });\n};\n\n_s(Forecast, \"cvS73gOejJkwdbin2g72dQbotTE=\", false, function () {\n  return [useColorModeValue, useColorModeValue, useColorModeValue];\n});\n\n_c = Forecast;\nexport default Forecast;\n\nvar _c;\n\n$RefreshReg$(_c, \"Forecast\");","map":{"version":3,"sources":["/Users/brandi/wiciweather/src/components/Forecast.jsx"],"names":["React","useContext","WeatherContext","useColorModeValue","Box","Flex","Heading","Spacer","Stack","StackDivider","Text","Image","getDay","getShortDate","Forecast","isCelsius","state","forecast","bg","color","borderColor","map","weather","index","date","conditionIcon","day","condition","icon","minTemp","avgTemp","maxTemp"],"mappings":"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","sourcesContent":["import React, { useContext } from 'react';\nimport { WeatherContext } from '../context';\nimport { useColorModeValue } from '@chakra-ui/color-mode';\nimport {\n  Box,\n  Flex,\n  Heading,\n  Spacer,\n  Stack,\n  StackDivider,\n  Text,\n} from '@chakra-ui/layout';\nimport { Image } from '@chakra-ui/image';\nimport { getDay } from '../helpers/getDay';\nimport { getShortDate } from '../helpers/getDate';\n\nconst Forecast = () => {\n  const {\n    isCelsius,\n    state: { forecast },\n  } = useContext(WeatherContext);\n\n  // Light mode | Dark mode style\n  const bg = useColorModeValue('white', 'gray.700');\n  const color = useColorModeValue('gray.600', 'gray.400');\n  const borderColor = useColorModeValue('gray.200', 'gray.600');\n\n  return forecast.map((weather, index) => {\n    const date = getShortDate(weather.date);\n    const conditionIcon = weather.day.condition.icon;\n    const minTemp = weather.day[isCelsius ? 'mintemp_c' : 'mintemp_f'];\n    const avgTemp = weather.day[isCelsius ? 'avgtemp_c' : 'avgtemp_f'];\n    const maxTemp = weather.day[isCelsius ? 'maxtemp_c' : 'mintemp_f'];\n    return (\n      <Flex\n        key={index}\n        mt={4}\n        px={6}\n        py={4}\n        display=\"flex\"\n        align=\"center\"\n        bg={bg}\n        shadow=\"base\"\n        borderRadius=\"2xl\"\n        transitionDuration=\".25s\"\n      >\n        <Box>\n          <Heading as=\"h3\" fontSize=\"lg\" fontWeight=\"medium\">\n            {getDay(weather.date)}\n          </Heading>\n          <Text color={color}>{date}</Text>\n        </Box>\n        <Spacer />\n        <Flex lineHeight=\"shorter\" textAlign=\"center\">\n          <Stack mr={6} spacing={0}>\n            <Text fontSize=\"2xl\">\n              {avgTemp}\n              <Text as=\"span\">&#176;</Text>\n            </Text>\n            <Stack\n              direction=\"row\"\n              divider={<StackDivider borderColor={borderColor} />}\n            >\n              <Text color={color}>\n                {minTemp}\n                <Text as=\"span\">&#176;</Text>\n              </Text>\n              <Text>\n                {maxTemp}\n                <Text as=\"span\">&#176;</Text>\n              </Text>\n            </Stack>\n          </Stack>\n          <Image boxSize=\"50px\" src={conditionIcon} alt=\"weather condition\" />\n        </Flex>\n      </Flex>\n    );\n  });\n};\n\nexport default Forecast;\n"]},"metadata":{},"sourceType":"module"}