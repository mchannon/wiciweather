{"ast":null,"code":"import * as React from 'react';\nimport { processTypes } from './../_private/utils';\nimport { getChildrenByTypeDeep } from '../getChildrenByType';\nimport { typeOfComponent } from '../typeOfComponent';\n/**\r\n * Gets first child by specified type\r\n *\r\n * @since v1.0.0 (modified v2.0.0)\r\n * @template T\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildByTypeConfig} [config={ customTypeKey: '__TYPE', prioritized: false }] - The configuration params\r\n * @returns {T} - The first matching child\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n * //   prioritized?: boolean = false - Whether or not the order of types is prioritized\r\n *\r\n * export type GetChildByTypeConfig = { customTypeKey?: string, prioritized?: boolean };\r\n * @example\r\n * // Finds the first occurrence of either a ToDo (custom component w/defined type as prop), a div, or a React Fragment\r\n * getChildByType(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds the first occurrence of either a MyComponent (custom component - full component passed in), a div, or a React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildByType(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds the first occurrence of either a ToDo, a div, or a React Fragment with a preference for that order. If ToDo exists, it will return that first. If not, then div, etc.\r\n * getChildByType(children, ['ToDo', 'div', 'react.fragment'], { prioritized: true });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildByType, GetChildByTypeConfig }\r\n * @docgen_imp_note <em>GetChildByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\n\nexport var getChildByType = function (children, types, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.customTypeKey,\n      customTypeKey = _c === void 0 ? '__TYPE' : _c,\n      _d = _b.prioritized,\n      prioritized = _d === void 0 ? false : _d;\n\n  var _types = processTypes(Array.isArray(types) ? types : [types]);\n\n  var matches = React.Children.toArray(children).filter(function (child) {\n    return _types.indexOf(typeOfComponent(child, customTypeKey)) !== -1;\n  });\n\n  if (prioritized) {\n    var _loop_1 = function (type) {\n      var match = matches.find(function (x) {\n        return typeOfComponent(x, customTypeKey) === type;\n      });\n      if (match) return {\n        value: match\n      };\n    };\n\n    for (var _i = 0, _types_1 = _types; _i < _types_1.length; _i++) {\n      var type = _types_1[_i];\n\n      var state_1 = _loop_1(type);\n\n      if (typeof state_1 === \"object\") return state_1.value;\n    }\n  }\n\n  return matches[0];\n};\n/**\r\n * Gets first child by specified type (deep search)\r\n *\r\n * @since v1.0.0 (modified v2.0.0)\r\n * @template T\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildByTypeConfig} [{ customTypeKey: '__TYPE', prioritized: false }] - The configuration params\r\n * @returns {T} - The first matching child\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n * //   prioritized?: boolean = false - Whether or not the order of types is prioritized\r\n *\r\n * export type GetChildByTypeConfig = { customTypeKey?: string, prioritized?: boolean };\r\n * @example\r\n * // Finds the first occurrence of either a ToDo (custom component w/defined type as prop), a div, or a React Fragment\r\n * getChildByTypeDeep(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds the first occurrence of either a MyComponent (custom component - full component passed in), a div, or a React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildByTypeDeep(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds the first occurrence of either a ToDo, a div, or a React Fragment with a preference for that order. If ToDo exists, it will return that first. If not, then div, etc.\r\n * getChildByTypeDeep(children, ['ToDo', 'div', 'react.fragment'], { prioritized: true });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildByTypeDeep, GetChildByTypeConfig }\r\n * @docgen_imp_note <em>GetChildByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\n\nexport var getChildByTypeDeep = function (children, types, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.customTypeKey,\n      customTypeKey = _c === void 0 ? '__TYPE' : _c,\n      _d = _b.prioritized,\n      prioritized = _d === void 0 ? false : _d;\n\n  var _types = processTypes(Array.isArray(types) ? types : [types]);\n\n  var matches = getChildrenByTypeDeep(children, _types, {\n    customTypeKey: customTypeKey\n  });\n\n  if (prioritized) {\n    var _loop_2 = function (type) {\n      var match = matches.find(function (x) {\n        return typeOfComponent(x, customTypeKey) === type;\n      });\n      if (match) return {\n        value: match\n      };\n    };\n\n    for (var _i = 0, _types_2 = _types; _i < _types_2.length; _i++) {\n      var type = _types_2[_i];\n\n      var state_2 = _loop_2(type);\n\n      if (typeof state_2 === \"object\") return state_2.value;\n    }\n  }\n\n  return matches[0];\n};","map":{"version":3,"sources":["/Users/brandi/wiciweather/node_modules/react-nanny/lib/es6/getChildByType/index.js"],"names":["React","processTypes","getChildrenByTypeDeep","typeOfComponent","getChildByType","children","types","_a","_b","_c","customTypeKey","_d","prioritized","_types","Array","isArray","matches","Children","toArray","filter","child","indexOf","_loop_1","type","match","find","x","value","_i","_types_1","length","state_1","getChildByTypeDeep","_loop_2","_types_2","state_2"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport { processTypes } from './../_private/utils';\r\nimport { getChildrenByTypeDeep } from '../getChildrenByType';\r\nimport { typeOfComponent } from '../typeOfComponent';\r\n/**\r\n * Gets first child by specified type\r\n *\r\n * @since v1.0.0 (modified v2.0.0)\r\n * @template T\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildByTypeConfig} [config={ customTypeKey: '__TYPE', prioritized: false }] - The configuration params\r\n * @returns {T} - The first matching child\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n * //   prioritized?: boolean = false - Whether or not the order of types is prioritized\r\n *\r\n * export type GetChildByTypeConfig = { customTypeKey?: string, prioritized?: boolean };\r\n * @example\r\n * // Finds the first occurrence of either a ToDo (custom component w/defined type as prop), a div, or a React Fragment\r\n * getChildByType(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds the first occurrence of either a MyComponent (custom component - full component passed in), a div, or a React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildByType(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds the first occurrence of either a ToDo, a div, or a React Fragment with a preference for that order. If ToDo exists, it will return that first. If not, then div, etc.\r\n * getChildByType(children, ['ToDo', 'div', 'react.fragment'], { prioritized: true });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildByType, GetChildByTypeConfig }\r\n * @docgen_imp_note <em>GetChildByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\r\nexport var getChildByType = function (children, types, _a) {\r\n    var _b = _a === void 0 ? {} : _a, _c = _b.customTypeKey, customTypeKey = _c === void 0 ? '__TYPE' : _c, _d = _b.prioritized, prioritized = _d === void 0 ? false : _d;\r\n    var _types = processTypes(Array.isArray(types) ? types : [types]);\r\n    var matches = React.Children.toArray(children).filter(function (child) { return _types.indexOf(typeOfComponent(child, customTypeKey)) !== -1; });\r\n    if (prioritized) {\r\n        var _loop_1 = function (type) {\r\n            var match = matches.find(function (x) { return typeOfComponent(x, customTypeKey) === type; });\r\n            if (match)\r\n                return { value: match };\r\n        };\r\n        for (var _i = 0, _types_1 = _types; _i < _types_1.length; _i++) {\r\n            var type = _types_1[_i];\r\n            var state_1 = _loop_1(type);\r\n            if (typeof state_1 === \"object\")\r\n                return state_1.value;\r\n        }\r\n    }\r\n    return matches[0];\r\n};\r\n/**\r\n * Gets first child by specified type (deep search)\r\n *\r\n * @since v1.0.0 (modified v2.0.0)\r\n * @template T\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildByTypeConfig} [{ customTypeKey: '__TYPE', prioritized: false }] - The configuration params\r\n * @returns {T} - The first matching child\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n * //   prioritized?: boolean = false - Whether or not the order of types is prioritized\r\n *\r\n * export type GetChildByTypeConfig = { customTypeKey?: string, prioritized?: boolean };\r\n * @example\r\n * // Finds the first occurrence of either a ToDo (custom component w/defined type as prop), a div, or a React Fragment\r\n * getChildByTypeDeep(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds the first occurrence of either a MyComponent (custom component - full component passed in), a div, or a React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildByTypeDeep(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds the first occurrence of either a ToDo, a div, or a React Fragment with a preference for that order. If ToDo exists, it will return that first. If not, then div, etc.\r\n * getChildByTypeDeep(children, ['ToDo', 'div', 'react.fragment'], { prioritized: true });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildByTypeDeep, GetChildByTypeConfig }\r\n * @docgen_imp_note <em>GetChildByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\r\nexport var getChildByTypeDeep = function (children, types, _a) {\r\n    var _b = _a === void 0 ? {} : _a, _c = _b.customTypeKey, customTypeKey = _c === void 0 ? '__TYPE' : _c, _d = _b.prioritized, prioritized = _d === void 0 ? false : _d;\r\n    var _types = processTypes(Array.isArray(types) ? types : [types]);\r\n    var matches = getChildrenByTypeDeep(children, _types, { customTypeKey: customTypeKey });\r\n    if (prioritized) {\r\n        var _loop_2 = function (type) {\r\n            var match = matches.find(function (x) { return typeOfComponent(x, customTypeKey) === type; });\r\n            if (match)\r\n                return { value: match };\r\n        };\r\n        for (var _i = 0, _types_2 = _types; _i < _types_2.length; _i++) {\r\n            var type = _types_2[_i];\r\n            var state_2 = _loop_2(type);\r\n            if (typeof state_2 === \"object\")\r\n                return state_2.value;\r\n        }\r\n    }\r\n    return matches[0];\r\n};\r\n"]},"metadata":{},"sourceType":"module"}