{"ast":null,"code":"/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\n\n/**\r\n * Gets the string type of the component's {customTypeKey}, string type of the core html (JSX intrinsic) element, or the function type\r\n *\r\n * @since v1.0.0\r\n * @param {any} component - The component to type check\r\n * @param {string} [customTypeKey='__TYPE'] - The custom component prop key to check the type\r\n * @returns {string} - The string representation of the type\r\n * @docgen_note\r\n * React Fragments will return type 'react.fragment'. Priority will be given to the <em>{customTypeKey}</em> if one exists\r\n */\nexport var typeOfComponent = function (component, customTypeKey) {\n  if (customTypeKey === void 0) {\n    customTypeKey = '__TYPE';\n  }\n\n  return (component === null || component === void 0 ? void 0 : component.props) && component.props[customTypeKey] || typeof (component === null || component === void 0 ? void 0 : component.type) === 'string' && component.type || (component === null || component === void 0 ? void 0 : component.type) && typeof component.type === 'symbol' && component.type.toString() === 'Symbol(react.fragment)' && 'react.fragment' || typeof (component === null || component === void 0 ? void 0 : component.type) === 'function' && component.type || typeof (component === null || component === void 0 ? void 0 : component.type) === 'object' && component.type.$$typeof.toString() === 'Symbol(react.forward_ref)' && 'react.forward_ref' || typeof component === 'string' && 'string' || undefined;\n};","map":{"version":3,"sources":["/Users/brandi/wiciweather/node_modules/react-nanny/lib/es6/typeOfComponent/index.js"],"names":["typeOfComponent","component","customTypeKey","props","type","toString","$$typeof","undefined"],"mappings":"AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIA,eAAe,GAAG,UAAUC,SAAV,EAAqBC,aAArB,EAAoC;AAC7D,MAAIA,aAAa,KAAK,KAAK,CAA3B,EAA8B;AAAEA,IAAAA,aAAa,GAAG,QAAhB;AAA2B;;AAC3D,SAAQ,CAACD,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACE,KAAjE,KAA2EF,SAAS,CAACE,KAAV,CAAgBD,aAAhB,CAA5E,IACF,QAAQD,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACG,IAAxE,MAAkF,QAAlF,IAA8FH,SAAS,CAACG,IADtG,IAEF,CAACH,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACG,IAAjE,KAA0E,OAAOH,SAAS,CAACG,IAAjB,KAA0B,QAApG,IAAgHH,SAAS,CAACG,IAAV,CAAeC,QAAf,OAA8B,wBAA9I,IAA0K,gBAFxK,IAGF,QAAQJ,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACG,IAAxE,MAAkF,UAAlF,IAAgGH,SAAS,CAACG,IAHxG,IAIF,QAAQH,SAAS,KAAK,IAAd,IAAsBA,SAAS,KAAK,KAAK,CAAzC,GAA6C,KAAK,CAAlD,GAAsDA,SAAS,CAACG,IAAxE,MAAkF,QAAlF,IAA8FH,SAAS,CAACG,IAAV,CAAeE,QAAf,CAAwBD,QAAxB,OAAuC,2BAArI,IAAoK,mBAJlK,IAKF,OAAOJ,SAAP,KAAqB,QAArB,IAAiC,QAL/B,IAMHM,SANJ;AAOH,CATM","sourcesContent":["/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\n/**\r\n * Gets the string type of the component's {customTypeKey}, string type of the core html (JSX intrinsic) element, or the function type\r\n *\r\n * @since v1.0.0\r\n * @param {any} component - The component to type check\r\n * @param {string} [customTypeKey='__TYPE'] - The custom component prop key to check the type\r\n * @returns {string} - The string representation of the type\r\n * @docgen_note\r\n * React Fragments will return type 'react.fragment'. Priority will be given to the <em>{customTypeKey}</em> if one exists\r\n */\r\nexport var typeOfComponent = function (component, customTypeKey) {\r\n    if (customTypeKey === void 0) { customTypeKey = '__TYPE'; }\r\n    return ((component === null || component === void 0 ? void 0 : component.props) && component.props[customTypeKey]) ||\r\n        (typeof (component === null || component === void 0 ? void 0 : component.type) === 'string' && component.type) ||\r\n        ((component === null || component === void 0 ? void 0 : component.type) && typeof component.type === 'symbol' && component.type.toString() === 'Symbol(react.fragment)' && 'react.fragment') ||\r\n        (typeof (component === null || component === void 0 ? void 0 : component.type) === 'function' && component.type) ||\r\n        (typeof (component === null || component === void 0 ? void 0 : component.type) === 'object' && component.type.$$typeof.toString() === 'Symbol(react.forward_ref)' && 'react.forward_ref') ||\r\n        (typeof component === 'string' && 'string') ||\r\n        undefined;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}