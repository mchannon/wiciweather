{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport * as React from 'react';\nimport { processTypes } from '../_private/utils';\nimport { typeOfComponent } from '../typeOfComponent';\n/**\r\n * Gets all children by specified type\r\n *\r\n * @since v1.0.0 (modified v2.0.0)\r\n * @template T\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildrenByTypeConfig} [config={ customTypeKey: '__TYPE' }] - The configuration params\r\n * @returns {T[]} - Array of matching children\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n *\r\n * export type GetChildrenByTypeConfig = { customTypeKey?: string };\r\n * @example\r\n * // Finds all occurrences of ToDo (custom component), div, and React Fragment\r\n * getChildrenByType(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds all occurrences of MyComponent (custom component - full component passed in), a div, and React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildrenByType(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds all occurrences of ToDo (custom component) with a customized {customTypeKey}\r\n * getChildrenByType(children, ['ToDo'], { customTypeKey: 'myTypeKey' });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildrenByType, GetChildrenByTypeConfig }\r\n * @docgen_imp_note <em>GetChildrenByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\n\nexport var getChildrenByType = function (children, types, _a) {\n  var _b = _a === void 0 ? {} : _a,\n      _c = _b.customTypeKey,\n      customTypeKey = _c === void 0 ? '__TYPE' : _c;\n\n  var _types = processTypes(Array.isArray(types) ? types : [types]);\n\n  return React.Children.toArray(children).filter(function (child) {\n    return _types.indexOf(typeOfComponent(child, customTypeKey)) !== -1;\n  });\n};\n/**\r\n * Gets all children by specified type (deep search)\r\n *\r\n * @since v1.0.0 (modified v2.0.0)\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildrenByTypeConfig} [{ customTypeKey: '__TYPE' }] - The configuration params\r\n * @returns {T[]} - Array of matching children\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n *\r\n * export type GetChildrenByTypeConfig = { customTypeKey?: string };\r\n * @example\r\n * // Finds all occurrences of ToDo (custom component), div, and React Fragment\r\n * getChildrenByTypeDeep(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds all occurrences of MyComponent (custom component - full component passed in), a div, and React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildrenByTypeDeep(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds all occurrences of ToDo (custom component) with a customized {customTypeKey}\r\n * getChildrenByTypeDeep(children, ['ToDo'], { customTypeKey: 'myTypeKey' });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildrenByTypeDeep, GetChildrenByTypeConfig }\r\n * @docgen_imp_note <em>GetChildrenByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\n\nexport var getChildrenByTypeDeep = function (children, types, _a) {\n  var _b;\n\n  var _c = _a === void 0 ? {} : _a,\n      _d = _c.customTypeKey,\n      customTypeKey = _d === void 0 ? '__TYPE' : _d;\n\n  var _children = React.Children.toArray(children);\n\n  var _types = processTypes(Array.isArray(types) ? types : [types]);\n\n  var output = [];\n\n  for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {\n    var child = _children_1[_i];\n\n    if (_types.indexOf(typeOfComponent(child, customTypeKey)) !== -1) {\n      output = __spreadArray(__spreadArray([], output), [child]);\n    }\n\n    if ((_b = child.props) === null || _b === void 0 ? void 0 : _b.children) {\n      output = __spreadArray(__spreadArray([], output), getChildrenByTypeDeep(child.props.children, _types, {\n        customTypeKey: customTypeKey\n      }));\n    }\n  }\n\n  return output;\n};","map":{"version":3,"sources":["/Users/brandi/wiciweather/node_modules/react-nanny/lib/es6/getChildrenByType/index.js"],"names":["__spreadArray","to","from","i","il","length","j","React","processTypes","typeOfComponent","getChildrenByType","children","types","_a","_b","_c","customTypeKey","_types","Array","isArray","Children","toArray","filter","child","indexOf","getChildrenByTypeDeep","_d","_children","output","_i","_children_1","props"],"mappings":"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","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nimport * as React from 'react';\r\nimport { processTypes } from '../_private/utils';\r\nimport { typeOfComponent } from '../typeOfComponent';\r\n/**\r\n * Gets all children by specified type\r\n *\r\n * @since v1.0.0 (modified v2.0.0)\r\n * @template T\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildrenByTypeConfig} [config={ customTypeKey: '__TYPE' }] - The configuration params\r\n * @returns {T[]} - Array of matching children\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n *\r\n * export type GetChildrenByTypeConfig = { customTypeKey?: string };\r\n * @example\r\n * // Finds all occurrences of ToDo (custom component), div, and React Fragment\r\n * getChildrenByType(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds all occurrences of MyComponent (custom component - full component passed in), a div, and React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildrenByType(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds all occurrences of ToDo (custom component) with a customized {customTypeKey}\r\n * getChildrenByType(children, ['ToDo'], { customTypeKey: 'myTypeKey' });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildrenByType, GetChildrenByTypeConfig }\r\n * @docgen_imp_note <em>GetChildrenByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\r\nexport var getChildrenByType = function (children, types, _a) {\r\n    var _b = _a === void 0 ? {} : _a, _c = _b.customTypeKey, customTypeKey = _c === void 0 ? '__TYPE' : _c;\r\n    var _types = processTypes(Array.isArray(types) ? types : [types]);\r\n    return React.Children.toArray(children).filter(function (child) { return _types.indexOf(typeOfComponent(child, customTypeKey)) !== -1; });\r\n};\r\n/**\r\n * Gets all children by specified type (deep search)\r\n *\r\n * @since v1.0.0 (modified v2.0.0)\r\n * @template TC\r\n * @param {T} children - JSX children\r\n * @param {TC | TC[]} types - Types of children to match\r\n * @param {GetChildrenByTypeConfig} [{ customTypeKey: '__TYPE' }] - The configuration params\r\n * @returns {T[]} - Array of matching children\r\n * @docgen_types\r\n * // The configuration type for the util:\r\n * //   customTypeKey?: string = '__TYPE' - The custom component prop key to check the type\r\n *\r\n * export type GetChildrenByTypeConfig = { customTypeKey?: string };\r\n * @example\r\n * // Finds all occurrences of ToDo (custom component), div, and React Fragment\r\n * getChildrenByTypeDeep(children, ['ToDo', 'div', 'react.fragment']);\r\n *\r\n * // Finds all occurrences of MyComponent (custom component - full component passed in), a div, and React Fragment\r\n * import MyComponent from './MyComponent';\r\n * getChildrenByTypeDeep(children, [MyComponent, 'div', 'react.fragment']);\r\n *\r\n * // Finds all occurrences of ToDo (custom component) with a customized {customTypeKey}\r\n * getChildrenByTypeDeep(children, ['ToDo'], { customTypeKey: 'myTypeKey' });\r\n * @docgen_note\r\n * This function will check the prop <em>{customTypeKey}</em> first and then <em>component.type</em> to match core html (JSX intrinsic) elements or component functions. To find a React Fragment, search for <em>'react.fragment'</em>.\r\n * @docgen_import { getChildrenByTypeDeep, GetChildrenByTypeConfig }\r\n * @docgen_imp_note <em>GetChildrenByTypeConfig</em> is a TypeScript type and is only for (optional) use with TypeScript projects\r\n */\r\nexport var getChildrenByTypeDeep = function (children, types, _a) {\r\n    var _b;\r\n    var _c = _a === void 0 ? {} : _a, _d = _c.customTypeKey, customTypeKey = _d === void 0 ? '__TYPE' : _d;\r\n    var _children = React.Children.toArray(children);\r\n    var _types = processTypes(Array.isArray(types) ? types : [types]);\r\n    var output = [];\r\n    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {\r\n        var child = _children_1[_i];\r\n        if (_types.indexOf(typeOfComponent(child, customTypeKey)) !== -1) {\r\n            output = __spreadArray(__spreadArray([], output), [child]);\r\n        }\r\n        if ((_b = child.props) === null || _b === void 0 ? void 0 : _b.children) {\r\n            output = __spreadArray(__spreadArray([], output), getChildrenByTypeDeep(child.props.children, _types, { customTypeKey: customTypeKey }));\r\n        }\r\n    }\r\n    return output;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}