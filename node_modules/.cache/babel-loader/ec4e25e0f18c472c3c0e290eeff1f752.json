{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport * as React from 'react';\n/**\r\n * Immutably override props of the children of the original component and (optionally) the original component\r\n *\r\n * @since v2.3.0\r\n * @param {React.ReactElement} component - The component whose children you want to modify\r\n * @param {(child: T, index?: number) => object} getChildOverrides - Callback function that returns an object containing the props you wish to override for each child\r\n * @param {object} [overrides] - Any other props to override on the original component\r\n * @returns {React.ReactElement} The original component with the children with modified prop values\r\n * @example *\r\n * // This will override the active prop for each child component to {true}\r\n * overrideProps(component, () => ({ active: true }));\r\n *\r\n * // This will override the active prop for each child component to {true} where child has a title prop = 'Supervisor'\r\n * overrideProps(component, child => child.props.title === 'Supervisor' ? ({ active: true }) : {});\r\n *\r\n * // This will override the active prop for each child component to {true} and override the hello prop on the root component\r\n * overrideProps(component, () => ({ active: true }), { hello: 'Hola mundo' });\r\n * @docgen_description_note\r\n * This function is a handy shortcut for when you may need to override the props of your child components and is an alternative for writing your own looped <em>React.cloneElement</em> calls.\r\n */\n\nexport var overrideProps = function (component, getChildOverrides, overrides) {\n  if (overrides === void 0) {\n    overrides = {};\n  }\n\n  if (!component) return component;\n\n  var _overrides = overrides !== null && overrides !== void 0 ? overrides : {};\n\n  if (!component.props && Object.keys(_overrides).length <= 0) return component;\n  if (!component.props.children) return React.cloneElement(component, _overrides);\n\n  if (Array.isArray(component.props.children)) {\n    return React.cloneElement(component, Object.assign(_overrides, {\n      children: React.Children.toArray(component.props.children).map(function (child, index) {\n        return React.cloneElement(child, getChildOverrides(child, index));\n      })\n    }));\n  }\n\n  return React.cloneElement(component, Object.assign(_overrides, {\n    children: React.cloneElement(component.props.children, getChildOverrides(component.props.children, 0))\n  }));\n};\n/**\r\n * Immutably override props of the children and all descendants (deep)\r\n *\r\n * @since v2.10.0\r\n * @param {T} children - JSX children\r\n * @param {(child: T) => object} getChildOverrides - Callback function that returns an object containing the props you wish to override for each child\r\n * @returns {TC[]} - All children with modified prop values\r\n * @example *\r\n * // This will override the active prop for each child component to {true}\r\n * overridePropsDeep(children, () => ({ active: true }));\r\n *\r\n * // This will override the active prop for each child component to {true} where child has a title prop = 'Supervisor'\r\n * overridePropsDeep(children, child => child.props.title === 'Supervisor' ? ({ active: true }) : {});\r\n * @docgen_description_note\r\n * This function is a handy shortcut for when you may need to override the props of your deeply nested child components and is an alternative for writing your own looped <em>React.cloneElement</em> calls.\r\n */\n\nexport var overridePropsDeep = function (children, getChildOverrides) {\n  var _a;\n\n  if (!children) return [];\n\n  var _children = React.Children.toArray(children);\n\n  var output = [];\n\n  for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {\n    var child = _children_1[_i];\n\n    if ((_a = child.props) === null || _a === void 0 ? void 0 : _a.children) {\n      var _child = React.cloneElement(child, Object.assign(getChildOverrides(child), {\n        children: overridePropsDeep(child.props.children, getChildOverrides)\n      }));\n\n      output = __spreadArray(__spreadArray([], output), [_child]);\n    } else if (child.props) {\n      var _child = React.cloneElement(child, getChildOverrides(child));\n\n      output = __spreadArray(__spreadArray([], output), [_child]);\n    } else {\n      output = __spreadArray(__spreadArray([], output), [child]);\n    }\n  }\n\n  return output;\n};","map":{"version":3,"sources":["/Users/brandi/wiciweather/node_modules/react-nanny/lib/es6/overrideProps/index.js"],"names":["__spreadArray","to","from","i","il","length","j","React","overrideProps","component","getChildOverrides","overrides","_overrides","props","Object","keys","children","cloneElement","Array","isArray","assign","Children","toArray","map","child","index","overridePropsDeep","_a","_children","output","_i","_children_1","_child"],"mappings":"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","sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n};\r\nimport * as React from 'react';\r\n/**\r\n * Immutably override props of the children of the original component and (optionally) the original component\r\n *\r\n * @since v2.3.0\r\n * @param {React.ReactElement} component - The component whose children you want to modify\r\n * @param {(child: T, index?: number) => object} getChildOverrides - Callback function that returns an object containing the props you wish to override for each child\r\n * @param {object} [overrides] - Any other props to override on the original component\r\n * @returns {React.ReactElement} The original component with the children with modified prop values\r\n * @example *\r\n * // This will override the active prop for each child component to {true}\r\n * overrideProps(component, () => ({ active: true }));\r\n *\r\n * // This will override the active prop for each child component to {true} where child has a title prop = 'Supervisor'\r\n * overrideProps(component, child => child.props.title === 'Supervisor' ? ({ active: true }) : {});\r\n *\r\n * // This will override the active prop for each child component to {true} and override the hello prop on the root component\r\n * overrideProps(component, () => ({ active: true }), { hello: 'Hola mundo' });\r\n * @docgen_description_note\r\n * This function is a handy shortcut for when you may need to override the props of your child components and is an alternative for writing your own looped <em>React.cloneElement</em> calls.\r\n */\r\nexport var overrideProps = function (component, getChildOverrides, overrides) {\r\n    if (overrides === void 0) { overrides = {}; }\r\n    if (!component)\r\n        return component;\r\n    var _overrides = overrides !== null && overrides !== void 0 ? overrides : {};\r\n    if (!component.props && Object.keys(_overrides).length <= 0)\r\n        return component;\r\n    if (!component.props.children)\r\n        return React.cloneElement(component, _overrides);\r\n    if (Array.isArray(component.props.children)) {\r\n        return React.cloneElement(component, Object.assign(_overrides, {\r\n            children: React.Children.toArray(component.props.children).map(function (child, index) { return React.cloneElement(child, getChildOverrides(child, index)); }),\r\n        }));\r\n    }\r\n    return React.cloneElement(component, Object.assign(_overrides, {\r\n        children: React.cloneElement(component.props.children, getChildOverrides(component.props.children, 0)),\r\n    }));\r\n};\r\n/**\r\n * Immutably override props of the children and all descendants (deep)\r\n *\r\n * @since v2.10.0\r\n * @param {T} children - JSX children\r\n * @param {(child: T) => object} getChildOverrides - Callback function that returns an object containing the props you wish to override for each child\r\n * @returns {TC[]} - All children with modified prop values\r\n * @example *\r\n * // This will override the active prop for each child component to {true}\r\n * overridePropsDeep(children, () => ({ active: true }));\r\n *\r\n * // This will override the active prop for each child component to {true} where child has a title prop = 'Supervisor'\r\n * overridePropsDeep(children, child => child.props.title === 'Supervisor' ? ({ active: true }) : {});\r\n * @docgen_description_note\r\n * This function is a handy shortcut for when you may need to override the props of your deeply nested child components and is an alternative for writing your own looped <em>React.cloneElement</em> calls.\r\n */\r\nexport var overridePropsDeep = function (children, getChildOverrides) {\r\n    var _a;\r\n    if (!children)\r\n        return [];\r\n    var _children = React.Children.toArray(children);\r\n    var output = [];\r\n    for (var _i = 0, _children_1 = _children; _i < _children_1.length; _i++) {\r\n        var child = _children_1[_i];\r\n        if ((_a = child.props) === null || _a === void 0 ? void 0 : _a.children) {\r\n            var _child = React.cloneElement(child, Object.assign(getChildOverrides(child), { children: overridePropsDeep(child.props.children, getChildOverrides) }));\r\n            output = __spreadArray(__spreadArray([], output), [_child]);\r\n        }\r\n        else if (child.props) {\r\n            var _child = React.cloneElement(child, getChildOverrides(child));\r\n            output = __spreadArray(__spreadArray([], output), [_child]);\r\n        }\r\n        else {\r\n            output = __spreadArray(__spreadArray([], output), [child]);\r\n        }\r\n    }\r\n    return output;\r\n};\r\n"]},"metadata":{},"sourceType":"module"}